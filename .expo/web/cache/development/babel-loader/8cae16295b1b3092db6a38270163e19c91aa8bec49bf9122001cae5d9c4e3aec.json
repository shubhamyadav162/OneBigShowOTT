{"ast":null,"code":"\"use strict\";\n\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nvar APPROX_APP_BAR_HEIGHT = 56;\nvar DEFAULT_DRAWER_WIDTH = 360;\nvar getDefaultDrawerWidth = function getDefaultDrawerWidth(_ref) {\n  var width = _ref.width;\n  if (width - APPROX_APP_BAR_HEIGHT <= 360) {\n    return width - APPROX_APP_BAR_HEIGHT;\n  }\n  return DEFAULT_DRAWER_WIDTH;\n};\nexport function getDrawerWidth(_ref2) {\n  var layout = _ref2.layout,\n    drawerStyle = _ref2.drawerStyle;\n  var _ref3 = StyleSheet.flatten(drawerStyle) || {},\n    _ref3$width = _ref3.width,\n    width = _ref3$width === void 0 ? getDefaultDrawerWidth(layout) : _ref3$width;\n  if (typeof width === 'string' && width.endsWith('%')) {\n    var percentage = Number(width.replace(/%$/, ''));\n    if (Number.isFinite(percentage)) {\n      return layout.width * (percentage / 100);\n    }\n  }\n  return typeof width === 'number' ? width : 0;\n}","map":{"version":3,"names":["APPROX_APP_BAR_HEIGHT","DEFAULT_DRAWER_WIDTH","getDefaultDrawerWidth","_ref","width","getDrawerWidth","_ref2","layout","drawerStyle","_ref3","StyleSheet","flatten","_ref3$width","endsWith","percentage","Number","replace","isFinite"],"sources":["E:\\bigshow\\node_modules\\react-native-drawer-layout\\src\\utils\\getDrawerWidth.tsx"],"sourcesContent":["import { type StyleProp, StyleSheet, type ViewStyle } from 'react-native';\n\nconst APPROX_APP_BAR_HEIGHT = 56;\nconst DEFAULT_DRAWER_WIDTH = 360;\n\nconst getDefaultDrawerWidth = ({ width }: { width: number }) => {\n  /**\n   * Default drawer width is 360dp\n   * On screens smaller than 320dp, ideally the drawer would collapse to a navigation bar\n   * https://m3.material.io/components/navigation-drawer/specs\n   */\n  if (width - APPROX_APP_BAR_HEIGHT <= 360) {\n    return width - APPROX_APP_BAR_HEIGHT;\n  }\n\n  return DEFAULT_DRAWER_WIDTH;\n};\n\nexport function getDrawerWidth({\n  layout,\n  drawerStyle,\n}: {\n  layout: { width: number; height: number };\n  drawerStyle?: StyleProp<ViewStyle>;\n}) {\n  const { width = getDefaultDrawerWidth(layout) } =\n    StyleSheet.flatten(drawerStyle) || {};\n\n  if (typeof width === 'string' && width.endsWith('%')) {\n    // Try to calculate width if a percentage is given\n    const percentage = Number(width.replace(/%$/, ''));\n\n    if (Number.isFinite(percentage)) {\n      return layout.width * (percentage / 100);\n    }\n  }\n\n  return typeof width === 'number' ? width : 0;\n}\n"],"mappings":";;;AAEA,IAAMA,qBAAqB,GAAG,EAAE;AAChC,IAAMC,oBAAoB,GAAG,GAAG;AAEhC,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAAC,IAAA,EAAqC;EAAA,IAA/BC,KAAA,GAAAD,IAAA,CAAAC,KAAA;EAM/B,IAAIA,KAAK,GAAGJ,qBAAqB,IAAI,GAAG,EAAE;IACxC,OAAOI,KAAK,GAAGJ,qBAAqB;EACtC;EAEA,OAAOC,oBAAoB;AAC7B,CAAC;AAED,OAAO,SAASI,cAAcA,CAAAC,KAAA,EAM3B;EAAA,IALDC,MAAM,GAAAD,KAAA,CAANC,MAAM;IACNC,WAAA,GAAAF,KAAA,CAAAE,WAAA;EAKA,IAAAC,KAAA,GACEC,UAAU,CAACC,OAAO,CAACH,WAAW,CAAC,IAAI,CAAC,CAAC;IAAAI,WAAA,GAAAH,KAAA,CAD/BL,KAAK;IAALA,KAAK,GAAAQ,WAAA,cAAGV,qBAAqB,CAACK,MAAM,IAAAK,WAAA;EAG5C,IAAI,OAAOR,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACS,QAAQ,CAAC,GAAG,CAAC,EAAE;IAEpD,IAAMC,UAAU,GAAGC,MAAM,CAACX,KAAK,CAACY,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IAElD,IAAID,MAAM,CAACE,QAAQ,CAACH,UAAU,CAAC,EAAE;MAC/B,OAAOP,MAAM,CAACH,KAAK,IAAIU,UAAU,GAAG,GAAG,CAAC;IAC1C;EACF;EAEA,OAAO,OAAOV,KAAK,KAAK,QAAQ,GAAGA,KAAK,GAAG,CAAC;AAC9C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}