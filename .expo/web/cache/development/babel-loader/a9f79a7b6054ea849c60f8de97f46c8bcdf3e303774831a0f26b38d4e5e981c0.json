{"ast":null,"code":"\"use strict\";\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"linking\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { createComponentForStaticNavigation, createPathConfigForStaticNavigation } from '@react-navigation/core';\nimport * as React from 'react';\nimport { NavigationContainer } from \"./NavigationContainer.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function createStaticNavigation(tree) {\n  var Component = createComponentForStaticNavigation(tree, 'RootNavigator');\n  function Navigation(_ref, ref) {\n    var _linking$config4, _linking$config5;\n    var linking = _ref.linking,\n      rest = _objectWithoutProperties(_ref, _excluded);\n    var linkingConfig = React.useMemo(function () {\n      var _linking$config, _linking$config2, _linking$config3;\n      var screens = createPathConfigForStaticNavigation(tree, {\n        initialRouteName: linking == null ? void 0 : (_linking$config = linking.config) == null ? void 0 : _linking$config.initialRouteName\n      }, (linking == null ? void 0 : linking.enabled) === 'auto');\n      if (!screens) return;\n      return {\n        path: linking == null ? void 0 : (_linking$config2 = linking.config) == null ? void 0 : _linking$config2.path,\n        initialRouteName: linking == null ? void 0 : (_linking$config3 = linking.config) == null ? void 0 : _linking$config3.initialRouteName,\n        screens: screens\n      };\n    }, [linking == null ? void 0 : linking.enabled, linking == null ? void 0 : (_linking$config4 = linking.config) == null ? void 0 : _linking$config4.path, linking == null ? void 0 : (_linking$config5 = linking.config) == null ? void 0 : _linking$config5.initialRouteName]);\n    var memoizedLinking = React.useMemo(function () {\n      if (!linking) {\n        return undefined;\n      }\n      var enabled = typeof linking.enabled === 'boolean' ? linking.enabled : (linkingConfig == null ? void 0 : linkingConfig.screens) != null;\n      return _objectSpread(_objectSpread({}, linking), {}, {\n        enabled: enabled,\n        config: linkingConfig\n      });\n    }, [linking, linkingConfig]);\n    if ((linking == null ? void 0 : linking.enabled) === true && (linkingConfig == null ? void 0 : linkingConfig.screens) == null) {\n      throw new Error('Linking is enabled but no linking configuration was found for the screens.\\n\\n' + 'To solve this:\\n' + \"- Specify a 'linking' property for the screens you want to link to.\\n\" + \"- Or set 'linking.enabled' to 'auto' to generate paths automatically.\\n\\n\" + 'See usage guide: https://reactnavigation.org/docs/static-configuration#linking');\n    }\n    return _jsx(NavigationContainer, _objectSpread(_objectSpread({}, rest), {}, {\n      ref: ref,\n      linking: memoizedLinking,\n      children: _jsx(Component, {})\n    }));\n  }\n  return React.forwardRef(Navigation);\n}","map":{"version":3,"names":["createComponentForStaticNavigation","createPathConfigForStaticNavigation","React","NavigationContainer","jsx","_jsx","createStaticNavigation","tree","Component","Navigation","_ref","ref","_linking$config4","_linking$config5","linking","rest","_objectWithoutProperties","_excluded","linkingConfig","useMemo","_linking$config","_linking$config2","_linking$config3","screens","initialRouteName","config","enabled","path","memoizedLinking","undefined","_objectSpread","Error","children","forwardRef"],"sources":["E:\\bigshow\\node_modules\\@react-navigation\\native\\src\\createStaticNavigation.tsx"],"sourcesContent":["import {\n  createComponentForStaticNavigation,\n  createPathConfigForStaticNavigation,\n  type NavigationContainerRef,\n  type ParamListBase,\n  type StaticNavigation,\n} from '@react-navigation/core';\nimport * as React from 'react';\n\nimport { NavigationContainer } from './NavigationContainer';\nimport type { LinkingOptions } from './types';\n\ntype Props = Omit<\n  React.ComponentProps<typeof NavigationContainer>,\n  'linking' | 'children'\n> & {\n  /**\n   * Options for deep linking.\n   */\n  linking?: Omit<LinkingOptions<ParamListBase>, 'config' | 'enabled'> & {\n    /**\n     * Whether deep link handling should be enabled.\n     * Defaults to `true` if any `linking` options are specified, `false` otherwise.\n     *\n     * When 'auto' is specified, all leaf screens will get a autogenerated path.\n     * The generated path will be a kebab-case version of the screen name.\n     * This can be overridden for specific screens by specifying `linking` for the screen.\n     */\n    enabled?: 'auto' | true | false;\n    /**\n     * Additional configuration\n     */\n    config?: Omit<\n      NonNullable<LinkingOptions<ParamListBase>['config']>,\n      'screens'\n    >;\n  };\n};\n\n/**\n * Create a navigation component from a static navigation config.\n * The returned component is a wrapper around `NavigationContainer`.\n *\n * @param tree Static navigation config.\n * @returns Navigation component to use in your app.\n */\nexport function createStaticNavigation(tree: StaticNavigation<any, any, any>) {\n  const Component = createComponentForStaticNavigation(tree, 'RootNavigator');\n\n  function Navigation(\n    { linking, ...rest }: Props,\n    ref: React.Ref<NavigationContainerRef<ParamListBase>>\n  ) {\n    const linkingConfig = React.useMemo(() => {\n      const screens = createPathConfigForStaticNavigation(\n        tree,\n        { initialRouteName: linking?.config?.initialRouteName },\n        linking?.enabled === 'auto'\n      );\n\n      if (!screens) return;\n\n      return {\n        path: linking?.config?.path,\n        initialRouteName: linking?.config?.initialRouteName,\n        screens,\n      };\n    }, [\n      linking?.enabled,\n      linking?.config?.path,\n      linking?.config?.initialRouteName,\n    ]);\n\n    const memoizedLinking = React.useMemo(() => {\n      if (!linking) {\n        return undefined;\n      }\n\n      const enabled =\n        typeof linking.enabled === 'boolean'\n          ? linking.enabled\n          : linkingConfig?.screens != null;\n\n      return {\n        ...linking,\n        enabled,\n        config: linkingConfig,\n      };\n    }, [linking, linkingConfig]);\n\n    if (linking?.enabled === true && linkingConfig?.screens == null) {\n      throw new Error(\n        'Linking is enabled but no linking configuration was found for the screens.\\n\\n' +\n          'To solve this:\\n' +\n          \"- Specify a 'linking' property for the screens you want to link to.\\n\" +\n          \"- Or set 'linking.enabled' to 'auto' to generate paths automatically.\\n\\n\" +\n          'See usage guide: https://reactnavigation.org/docs/static-configuration#linking'\n      );\n    }\n\n    return (\n      <NavigationContainer {...rest} ref={ref} linking={memoizedLinking}>\n        <Component />\n      </NavigationContainer>\n    );\n  }\n\n  return React.forwardRef(Navigation);\n}\n"],"mappings":";;;;;;;AAAA,SACEA,kCAAkC,EAClCC,mCAAmC,QAI9B,wBAAwB;AAC/B,OAAO,KAAKC,KAAK,MAAM,OAAO;AAE9B,SAASC,mBAAmB;AAAgC,SAAAC,GAAA,IAAAC,IAAA;AAqC5D,OAAO,SAASC,sBAAsBA,CAACC,IAAqC,EAAE;EAC5E,IAAMC,SAAS,GAAGR,kCAAkC,CAACO,IAAI,EAAE,eAAe,CAAC;EAE3E,SAASE,UAAUA,CAAAC,IAAA,EAEjBC,GAAqD,EACrD;IAAA,IAAAC,gBAAA,EAAAC,gBAAA;IAAA,IAFEC,OAAO,GAAAJ,IAAA,CAAPI,OAAO;MAAKC,IAAA,GAAAC,wBAAA,CAAAN,IAAA,EAAAO,SAAA;IAGd,IAAMC,aAAa,GAAGhB,KAAK,CAACiB,OAAO,CAAC,YAAM;MAAA,IAAAC,eAAA,EAAAC,gBAAA,EAAAC,gBAAA;MACxC,IAAMC,OAAO,GAAGtB,mCAAmC,CACjDM,IAAI,EACJ;QAAEiB,gBAAgB,EAAEV,OAAO,qBAAAM,eAAA,GAAPN,OAAO,CAAEW,MAAM,qBAAfL,eAAA,CAAiBI;MAAiB,CAAC,EACvD,CAAAV,OAAO,oBAAPA,OAAO,CAAEY,OAAO,MAAK,MACvB,CAAC;MAED,IAAI,CAACH,OAAO,EAAE;MAEd,OAAO;QACLI,IAAI,EAAEb,OAAO,qBAAAO,gBAAA,GAAPP,OAAO,CAAEW,MAAM,qBAAfJ,gBAAA,CAAiBM,IAAI;QAC3BH,gBAAgB,EAAEV,OAAO,qBAAAQ,gBAAA,GAAPR,OAAO,CAAEW,MAAM,qBAAfH,gBAAA,CAAiBE,gBAAgB;QACnDD,OAAA,EAAAA;MACF,CAAC;IACH,CAAC,EAAE,CACDT,OAAO,oBAAPA,OAAO,CAAEY,OAAO,EAChBZ,OAAO,qBAAAF,gBAAA,GAAPE,OAAO,CAAEW,MAAM,qBAAfb,gBAAA,CAAiBe,IAAI,EACrBb,OAAO,qBAAAD,gBAAA,GAAPC,OAAO,CAAEW,MAAM,qBAAfZ,gBAAA,CAAiBW,gBAAgB,CAClC,CAAC;IAEF,IAAMI,eAAe,GAAG1B,KAAK,CAACiB,OAAO,CAAC,YAAM;MAC1C,IAAI,CAACL,OAAO,EAAE;QACZ,OAAOe,SAAS;MAClB;MAEA,IAAMH,OAAO,GACX,OAAOZ,OAAO,CAACY,OAAO,KAAK,SAAS,GAChCZ,OAAO,CAACY,OAAO,GACf,CAAAR,aAAa,oBAAbA,aAAa,CAAEK,OAAO,KAAI,IAAI;MAEpC,OAAAO,aAAA,CAAAA,aAAA,KACKhB,OAAO;QACVY,OAAO,EAAPA,OAAO;QACPD,MAAM,EAAEP;MAAA;IAEZ,CAAC,EAAE,CAACJ,OAAO,EAAEI,aAAa,CAAC,CAAC;IAE5B,IAAI,CAAAJ,OAAO,oBAAPA,OAAO,CAAEY,OAAO,MAAK,IAAI,IAAI,CAAAR,aAAa,oBAAbA,aAAa,CAAEK,OAAO,KAAI,IAAI,EAAE;MAC/D,MAAM,IAAIQ,KAAK,CACb,gFAAgF,GAC9E,kBAAkB,GAClB,uEAAuE,GACvE,2EAA2E,GAC3E,gFACJ,CAAC;IACH;IAEA,OACE1B,IAAA,CAACF,mBAAmB,EAAA2B,aAAA,CAAAA,aAAA,KAAKf,IAAI;MAAEJ,GAAG,EAAEA,GAAI;MAACG,OAAO,EAAEc,eAAgB;MAAAI,QAAA,EAChE3B,IAAA,CAACG,SAAS,IAAE;IAAA,EACO,CAAC;EAE1B;EAEA,OAAON,KAAK,CAAC+B,UAAU,CAACxB,UAAU,CAAC;AACrC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}