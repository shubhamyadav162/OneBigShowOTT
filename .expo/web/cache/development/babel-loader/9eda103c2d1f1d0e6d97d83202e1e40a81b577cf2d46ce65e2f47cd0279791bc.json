{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport axios from 'axios';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar defaultHost = Platform.OS === 'android' ? '10.0.2.2' : '127.0.0.1';\nvar API_BASE_URL = `http://${defaultHost}:54321`;\nvar apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    Accept: 'application/json'\n  }\n});\napiClient.interceptors.request.use(function () {\n  var _ref = _asyncToGenerator(function* (config) {\n    var token = yield AsyncStorage.getItem('userToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  });\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}(), function (error) {\n  return Promise.reject(error);\n});\napiClient.interceptors.response.use(function (response) {\n  return response;\n}, function () {\n  var _ref2 = _asyncToGenerator(function* (error) {\n    var originalRequest = error.config;\n    if (error.response && error.response.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      try {\n        var refreshToken = yield AsyncStorage.getItem('refreshToken');\n        if (refreshToken) {\n          var response = yield axios.post(`${API_BASE_URL}/auth/refresh-token`, {\n            refreshToken: refreshToken\n          });\n          var _response$data = response.data,\n            accessToken = _response$data.accessToken,\n            newRefreshToken = _response$data.newRefreshToken;\n          yield AsyncStorage.setItem('userToken', accessToken);\n          yield AsyncStorage.setItem('refreshToken', newRefreshToken);\n          originalRequest.headers.Authorization = `Bearer ${accessToken}`;\n          return apiClient(originalRequest);\n        } else {\n          yield AsyncStorage.removeItem('userToken');\n        }\n      } catch (refreshError) {\n        yield AsyncStorage.removeItem('userToken');\n        yield AsyncStorage.removeItem('refreshToken');\n        return Promise.reject(refreshError);\n      }\n    }\n    return Promise.reject(error);\n  });\n  return function (_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nexport default apiClient;","map":{"version":3,"names":["axios","AsyncStorage","Platform","defaultHost","OS","API_BASE_URL","apiClient","create","baseURL","headers","Accept","interceptors","request","use","_ref","_asyncToGenerator","config","token","getItem","Authorization","_x","apply","arguments","error","Promise","reject","response","_ref2","originalRequest","status","_retry","refreshToken","post","_response$data","data","accessToken","newRefreshToken","setItem","removeItem","refreshError","_x2"],"sources":["E:/bigshow/src/api/client.js"],"sourcesContent":["import axios from 'axios';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { Platform } from 'react-native';\r\n\r\n// API base URL (dynamically use localhost or Android emulator loopback)\r\nconst defaultHost = Platform.OS === 'android' ? '10.0.2.2' : '127.0.0.1';\r\nconst API_BASE_URL = `http://${defaultHost}:54321`;\r\n\r\n// Create axios instance\r\nconst apiClient = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    Accept: 'application/json',\r\n  },\r\n});\r\n\r\n// Add request interceptor for authentication\r\napiClient.interceptors.request.use(\r\n  async (config) => {\r\n    // Get token from storage\r\n    const token = await AsyncStorage.getItem('userToken');\r\n    \r\n    // If token exists, add to headers\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    \r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add response interceptor for error handling\r\napiClient.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n    \r\n    // Handle 401 Unauthorized errors\r\n    if (error.response && error.response.status === 401 && !originalRequest._retry) {\r\n      originalRequest._retry = true;\r\n      \r\n      // Attempt to refresh token or redirect to login\r\n      try {\r\n        // Get refresh token\r\n        const refreshToken = await AsyncStorage.getItem('refreshToken');\r\n        \r\n        if (refreshToken) {\r\n          // Attempt to get new token\r\n          const response = await axios.post(`${API_BASE_URL}/auth/refresh-token`, {\r\n            refreshToken,\r\n          });\r\n          \r\n          // Store new tokens\r\n          const { accessToken, newRefreshToken } = response.data;\r\n          await AsyncStorage.setItem('userToken', accessToken);\r\n          await AsyncStorage.setItem('refreshToken', newRefreshToken);\r\n          \r\n          // Update authorization header and retry request\r\n          originalRequest.headers.Authorization = `Bearer ${accessToken}`;\r\n          return apiClient(originalRequest);\r\n        } else {\r\n          // No refresh token, redirect to login\r\n          // This should be handled by your auth context\r\n          await AsyncStorage.removeItem('userToken');\r\n          // You may want to dispatch an event to notify the app\r\n          // that the user should be logged out\r\n        }\r\n      } catch (refreshError) {\r\n        // Failed to refresh token\r\n        await AsyncStorage.removeItem('userToken');\r\n        await AsyncStorage.removeItem('refreshToken');\r\n        // Redirect to login\r\n        return Promise.reject(refreshError);\r\n      }\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default apiClient; "],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,YAAY,MAAM,2CAA2C;AAAC,OAAAC,QAAA;AAIrE,IAAMC,WAAW,GAAGD,QAAQ,CAACE,EAAE,KAAK,SAAS,GAAG,UAAU,GAAG,WAAW;AACxE,IAAMC,YAAY,GAAG,UAAUF,WAAW,QAAQ;AAGlD,IAAMG,SAAS,GAAGN,KAAK,CAACO,MAAM,CAAC;EAC7BC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE;IACP,cAAc,EAAE,kBAAkB;IAClCC,MAAM,EAAE;EACV;AACF,CAAC,CAAC;AAGFJ,SAAS,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAChC,WAAOC,MAAM,EAAK;IAEhB,IAAMC,KAAK,SAAShB,YAAY,CAACiB,OAAO,CAAC,WAAW,CAAC;IAGrD,IAAID,KAAK,EAAE;MACTD,MAAM,CAACP,OAAO,CAACU,aAAa,GAAG,UAAUF,KAAK,EAAE;IAClD;IAEA,OAAOD,MAAM;EACf,CAAC;EAAA,iBAAAI,EAAA;IAAA,OAAAN,IAAA,CAAAO,KAAA,OAAAC,SAAA;EAAA;AAAA,KACD,UAACC,KAAK,EAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAGDjB,SAAS,CAACK,YAAY,CAACe,QAAQ,CAACb,GAAG,CACjC,UAACa,QAAQ,EAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC;EAAA,IAAAC,KAAA,GAAAZ,iBAAA,CACD,WAAOQ,KAAK,EAAK;IACf,IAAMK,eAAe,GAAGL,KAAK,CAACP,MAAM;IAGpC,IAAIO,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACG,MAAM,KAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;MAC9EF,eAAe,CAACE,MAAM,GAAG,IAAI;MAG7B,IAAI;QAEF,IAAMC,YAAY,SAAS9B,YAAY,CAACiB,OAAO,CAAC,cAAc,CAAC;QAE/D,IAAIa,YAAY,EAAE;UAEhB,IAAML,QAAQ,SAAS1B,KAAK,CAACgC,IAAI,CAAC,GAAG3B,YAAY,qBAAqB,EAAE;YACtE0B,YAAY,EAAZA;UACF,CAAC,CAAC;UAGF,IAAAE,cAAA,GAAyCP,QAAQ,CAACQ,IAAI;YAA9CC,WAAW,GAAAF,cAAA,CAAXE,WAAW;YAAEC,eAAe,GAAAH,cAAA,CAAfG,eAAe;UACpC,MAAMnC,YAAY,CAACoC,OAAO,CAAC,WAAW,EAAEF,WAAW,CAAC;UACpD,MAAMlC,YAAY,CAACoC,OAAO,CAAC,cAAc,EAAED,eAAe,CAAC;UAG3DR,eAAe,CAACnB,OAAO,CAACU,aAAa,GAAG,UAAUgB,WAAW,EAAE;UAC/D,OAAO7B,SAAS,CAACsB,eAAe,CAAC;QACnC,CAAC,MAAM;UAGL,MAAM3B,YAAY,CAACqC,UAAU,CAAC,WAAW,CAAC;QAG5C;MACF,CAAC,CAAC,OAAOC,YAAY,EAAE;QAErB,MAAMtC,YAAY,CAACqC,UAAU,CAAC,WAAW,CAAC;QAC1C,MAAMrC,YAAY,CAACqC,UAAU,CAAC,cAAc,CAAC;QAE7C,OAAOd,OAAO,CAACC,MAAM,CAACc,YAAY,CAAC;MACrC;IACF;IAEA,OAAOf,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;EAC9B,CAAC;EAAA,iBAAAiB,GAAA;IAAA,OAAAb,KAAA,CAAAN,KAAA,OAAAC,SAAA;EAAA;AAAA,GACH,CAAC;AAED,eAAehB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}