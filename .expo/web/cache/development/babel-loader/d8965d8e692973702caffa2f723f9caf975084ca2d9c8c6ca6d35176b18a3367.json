{"ast":null,"code":"\"use strict\";\n\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _excluded = [\"navigation\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { getDefaultSidebarWidth, getHeaderTitle, Header, SafeAreaProviderCompat, Screen } from '@react-navigation/elements';\nimport { DrawerActions, StackActions, useLocale, useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Drawer } from 'react-native-drawer-layout';\nimport { useSafeAreaFrame } from 'react-native-safe-area-context';\nimport useLatestCallback from 'use-latest-callback';\nimport { addCancelListener } from \"../utils/addCancelListener\";\nimport { DrawerPositionContext } from \"../utils/DrawerPositionContext.js\";\nimport { DrawerStatusContext } from \"../utils/DrawerStatusContext.js\";\nimport { getDrawerStatusFromState } from \"../utils/getDrawerStatusFromState.js\";\nimport { DrawerContent } from \"./DrawerContent.js\";\nimport { DrawerToggleButton } from \"./DrawerToggleButton.js\";\nimport { MaybeScreen, MaybeScreenContainer } from \"./ScreenFallback.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar DRAWER_BORDER_RADIUS = 16;\nvar renderDrawerContentDefault = function renderDrawerContentDefault(props) {\n  return _jsx(DrawerContent, _objectSpread({}, props));\n};\nfunction DrawerViewBase(_ref) {\n  var state = _ref.state,\n    navigation = _ref.navigation,\n    descriptors = _ref.descriptors,\n    defaultStatus = _ref.defaultStatus,\n    _ref$drawerContent = _ref.drawerContent,\n    drawerContent = _ref$drawerContent === void 0 ? renderDrawerContentDefault : _ref$drawerContent,\n    _ref$detachInactiveSc = _ref.detachInactiveScreens,\n    detachInactiveScreens = _ref$detachInactiveSc === void 0 ? Platform.OS === 'web' || Platform.OS === 'android' || Platform.OS === 'ios' : _ref$detachInactiveSc;\n  var _useLocale = useLocale(),\n    direction = _useLocale.direction;\n  var focusedRouteKey = state.routes[state.index].key;\n  var _descriptors$focusedR = descriptors[focusedRouteKey].options,\n    drawerHideStatusBarOnOpen = _descriptors$focusedR.drawerHideStatusBarOnOpen,\n    _descriptors$focusedR2 = _descriptors$focusedR.drawerPosition,\n    drawerPosition = _descriptors$focusedR2 === void 0 ? direction === 'rtl' ? 'right' : 'left' : _descriptors$focusedR2,\n    drawerStatusBarAnimation = _descriptors$focusedR.drawerStatusBarAnimation,\n    drawerStyle = _descriptors$focusedR.drawerStyle,\n    _descriptors$focusedR3 = _descriptors$focusedR.drawerType,\n    drawerType = _descriptors$focusedR3 === void 0 ? Platform.select({\n      ios: 'slide',\n      default: 'front'\n    }) : _descriptors$focusedR3,\n    configureGestureHandler = _descriptors$focusedR.configureGestureHandler,\n    keyboardDismissMode = _descriptors$focusedR.keyboardDismissMode,\n    _descriptors$focusedR4 = _descriptors$focusedR.overlayColor,\n    overlayColor = _descriptors$focusedR4 === void 0 ? 'rgba(0, 0, 0, 0.5)' : _descriptors$focusedR4,\n    swipeEdgeWidth = _descriptors$focusedR.swipeEdgeWidth,\n    _descriptors$focusedR5 = _descriptors$focusedR.swipeEnabled,\n    swipeEnabled = _descriptors$focusedR5 === void 0 ? Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos' : _descriptors$focusedR5,\n    swipeMinDistance = _descriptors$focusedR.swipeMinDistance,\n    overlayAccessibilityLabel = _descriptors$focusedR.overlayAccessibilityLabel;\n  var _React$useState = React.useState([focusedRouteKey]),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    loaded = _React$useState2[0],\n    setLoaded = _React$useState2[1];\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([].concat(_toConsumableArray(loaded), [focusedRouteKey]));\n  }\n  var previousRouteKeyRef = React.useRef(focusedRouteKey);\n  React.useEffect(function () {\n    var _descriptors$previous;\n    var previousRouteKey = previousRouteKeyRef.current;\n    if (previousRouteKey !== focusedRouteKey && (_descriptors$previous = descriptors[previousRouteKey]) != null && _descriptors$previous.options.popToTopOnBlur) {\n      var _prevRoute$state;\n      var prevRoute = state.routes.find(function (route) {\n        return route.key === previousRouteKey;\n      });\n      if ((prevRoute == null ? void 0 : (_prevRoute$state = prevRoute.state) == null ? void 0 : _prevRoute$state.type) === 'stack' && prevRoute.state.key) {\n        navigation.dispatch(_objectSpread(_objectSpread({}, StackActions.popToTop()), {}, {\n          target: prevRoute.state.key\n        }));\n      }\n    }\n    previousRouteKeyRef.current = focusedRouteKey;\n  }, [descriptors, focusedRouteKey, navigation, state.routes]);\n  var dimensions = useSafeAreaFrame();\n  var _useTheme = useTheme(),\n    colors = _useTheme.colors;\n  var drawerStatus = getDrawerStatusFromState(state);\n  var handleDrawerOpen = useLatestCallback(function () {\n    navigation.dispatch(_objectSpread(_objectSpread({}, DrawerActions.openDrawer()), {}, {\n      target: state.key\n    }));\n  });\n  var handleDrawerClose = useLatestCallback(function () {\n    navigation.dispatch(_objectSpread(_objectSpread({}, DrawerActions.closeDrawer()), {}, {\n      target: state.key\n    }));\n  });\n  var handleGestureStart = useLatestCallback(function () {\n    navigation.emit({\n      type: 'gestureStart',\n      target: state.key\n    });\n  });\n  var handleGestureEnd = useLatestCallback(function () {\n    navigation.emit({\n      type: 'gestureEnd',\n      target: state.key\n    });\n  });\n  var handleGestureCancel = useLatestCallback(function () {\n    navigation.emit({\n      type: 'gestureCancel',\n      target: state.key\n    });\n  });\n  var handleTransitionStart = useLatestCallback(function (closing) {\n    navigation.emit({\n      type: 'transitionStart',\n      data: {\n        closing: closing\n      },\n      target: state.key\n    });\n  });\n  var handleTransitionEnd = useLatestCallback(function (closing) {\n    navigation.emit({\n      type: 'transitionEnd',\n      data: {\n        closing: closing\n      },\n      target: state.key\n    });\n  });\n  React.useEffect(function () {\n    if (drawerStatus === defaultStatus || drawerType === 'permanent') {\n      return;\n    }\n    var handleHardwareBack = function handleHardwareBack() {\n      if (!navigation.isFocused()) {\n        return false;\n      }\n      if (defaultStatus === 'open') {\n        handleDrawerOpen();\n      } else {\n        handleDrawerClose();\n      }\n      return true;\n    };\n    return addCancelListener(handleHardwareBack);\n  }, [defaultStatus, drawerStatus, drawerType, handleDrawerClose, handleDrawerOpen, navigation]);\n  var renderDrawerContent = function renderDrawerContent() {\n    return _jsx(DrawerPositionContext.Provider, {\n      value: drawerPosition,\n      children: drawerContent({\n        state: state,\n        navigation: navigation,\n        descriptors: descriptors\n      })\n    });\n  };\n  var renderSceneContent = function renderSceneContent() {\n    return _jsx(MaybeScreenContainer, {\n      enabled: detachInactiveScreens,\n      hasTwoStates: true,\n      style: styles.content,\n      children: state.routes.map(function (route, index) {\n        var descriptor = descriptors[route.key];\n        var _descriptor$options$l = descriptor.options.lazy,\n          lazy = _descriptor$options$l === void 0 ? true : _descriptor$options$l;\n        var isFocused = state.index === index;\n        var isPreloaded = state.preloadedRouteKeys.includes(route.key);\n        if (lazy && !loaded.includes(route.key) && !isFocused && !isPreloaded) {\n          return null;\n        }\n        var _descriptor$options = descriptor.options,\n          freezeOnBlur = _descriptor$options.freezeOnBlur,\n          _descriptor$options$h = _descriptor$options.header,\n          header = _descriptor$options$h === void 0 ? function (_ref2) {\n            var layout = _ref2.layout,\n              options = _ref2.options;\n            return _jsx(Header, _objectSpread(_objectSpread({}, options), {}, {\n              layout: layout,\n              title: getHeaderTitle(options, route.name),\n              headerLeft: drawerPosition === 'left' && options.headerLeft == null ? function (props) {\n                return _jsx(DrawerToggleButton, _objectSpread({}, props));\n              } : options.headerLeft,\n              headerRight: drawerPosition === 'right' && options.headerRight == null ? function (props) {\n                return _jsx(DrawerToggleButton, _objectSpread({}, props));\n              } : options.headerRight\n            }));\n          } : _descriptor$options$h,\n          headerShown = _descriptor$options.headerShown,\n          headerStatusBarHeight = _descriptor$options.headerStatusBarHeight,\n          headerTransparent = _descriptor$options.headerTransparent,\n          sceneStyle = _descriptor$options.sceneStyle;\n        return _jsx(MaybeScreen, {\n          style: [StyleSheet.absoluteFill, {\n            zIndex: isFocused ? 0 : -1\n          }],\n          visible: isFocused,\n          enabled: detachInactiveScreens,\n          freezeOnBlur: freezeOnBlur,\n          shouldFreeze: !isFocused && !isPreloaded,\n          children: _jsx(Screen, {\n            focused: isFocused,\n            route: descriptor.route,\n            navigation: descriptor.navigation,\n            headerShown: headerShown,\n            headerStatusBarHeight: headerStatusBarHeight,\n            headerTransparent: headerTransparent,\n            header: header({\n              layout: dimensions,\n              route: descriptor.route,\n              navigation: descriptor.navigation,\n              options: descriptor.options\n            }),\n            style: sceneStyle,\n            children: descriptor.render()\n          })\n        }, route.key);\n      })\n    });\n  };\n  return _jsx(DrawerStatusContext.Provider, {\n    value: drawerStatus,\n    children: _jsx(Drawer, {\n      open: drawerStatus !== 'closed',\n      onOpen: handleDrawerOpen,\n      onClose: handleDrawerClose,\n      onGestureStart: handleGestureStart,\n      onGestureEnd: handleGestureEnd,\n      onGestureCancel: handleGestureCancel,\n      onTransitionStart: handleTransitionStart,\n      onTransitionEnd: handleTransitionEnd,\n      layout: dimensions,\n      direction: direction,\n      configureGestureHandler: configureGestureHandler,\n      swipeEnabled: swipeEnabled,\n      swipeEdgeWidth: swipeEdgeWidth,\n      swipeMinDistance: swipeMinDistance,\n      hideStatusBarOnOpen: drawerHideStatusBarOnOpen,\n      statusBarAnimation: drawerStatusBarAnimation,\n      keyboardDismissMode: keyboardDismissMode,\n      drawerType: drawerType,\n      overlayAccessibilityLabel: overlayAccessibilityLabel,\n      drawerPosition: drawerPosition,\n      drawerStyle: [{\n        backgroundColor: colors.card,\n        width: getDefaultSidebarWidth(dimensions)\n      }, drawerType === 'permanent' && ((Platform.OS === 'web' ? drawerPosition === 'right' : direction === 'rtl' && drawerPosition !== 'right' || direction !== 'rtl' && drawerPosition === 'right') ? {\n        borderLeftColor: colors.border,\n        borderLeftWidth: StyleSheet.hairlineWidth\n      } : {\n        borderRightColor: colors.border,\n        borderRightWidth: StyleSheet.hairlineWidth\n      }), drawerType === 'front' && (drawerPosition === 'left' ? {\n        borderTopRightRadius: DRAWER_BORDER_RADIUS,\n        borderBottomRightRadius: DRAWER_BORDER_RADIUS\n      } : {\n        borderTopLeftRadius: DRAWER_BORDER_RADIUS,\n        borderBottomLeftRadius: DRAWER_BORDER_RADIUS\n      }), drawerStyle],\n      overlayStyle: {\n        backgroundColor: overlayColor\n      },\n      renderDrawerContent: renderDrawerContent,\n      children: renderSceneContent()\n    })\n  });\n}\nexport function DrawerView(_ref3) {\n  var navigation = _ref3.navigation,\n    rest = _objectWithoutProperties(_ref3, _excluded);\n  return _jsx(SafeAreaProviderCompat, {\n    children: _jsx(DrawerViewBase, _objectSpread({\n      navigation: navigation\n    }, rest))\n  });\n}\nvar styles = StyleSheet.create({\n  content: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["getDefaultSidebarWidth","getHeaderTitle","Header","SafeAreaProviderCompat","Screen","DrawerActions","StackActions","useLocale","useTheme","React","Platform","StyleSheet","Drawer","useSafeAreaFrame","useLatestCallback","addCancelListener","DrawerPositionContext","DrawerStatusContext","getDrawerStatusFromState","DrawerContent","DrawerToggleButton","MaybeScreen","MaybeScreenContainer","jsx","_jsx","DRAWER_BORDER_RADIUS","renderDrawerContentDefault","props","_objectSpread","DrawerViewBase","_ref","state","navigation","descriptors","defaultStatus","_ref$drawerContent","drawerContent","_ref$detachInactiveSc","detachInactiveScreens","OS","_useLocale","direction","focusedRouteKey","routes","index","key","_descriptors$focusedR","options","drawerHideStatusBarOnOpen","_descriptors$focusedR2","drawerPosition","drawerStatusBarAnimation","drawerStyle","_descriptors$focusedR3","drawerType","select","ios","default","configureGestureHandler","keyboardDismissMode","_descriptors$focusedR4","overlayColor","swipeEdgeWidth","_descriptors$focusedR5","swipeEnabled","swipeMinDistance","overlayAccessibilityLabel","_React$useState","useState","_React$useState2","_slicedToArray","loaded","setLoaded","includes","concat","_toConsumableArray","previousRouteKeyRef","useRef","useEffect","_descriptors$previous","previousRouteKey","current","popToTopOnBlur","_prevRoute$state","prevRoute","find","route","type","dispatch","popToTop","target","dimensions","_useTheme","colors","drawerStatus","handleDrawerOpen","openDrawer","handleDrawerClose","closeDrawer","handleGestureStart","emit","handleGestureEnd","handleGestureCancel","handleTransitionStart","closing","data","handleTransitionEnd","handleHardwareBack","isFocused","renderDrawerContent","Provider","value","children","renderSceneContent","enabled","hasTwoStates","style","styles","content","map","descriptor","_descriptor$options$l","lazy","isPreloaded","preloadedRouteKeys","_descriptor$options","freezeOnBlur","_descriptor$options$h","header","_ref2","layout","title","name","headerLeft","headerRight","headerShown","headerStatusBarHeight","headerTransparent","sceneStyle","absoluteFill","zIndex","visible","shouldFreeze","focused","render","open","onOpen","onClose","onGestureStart","onGestureEnd","onGestureCancel","onTransitionStart","onTransitionEnd","hideStatusBarOnOpen","statusBarAnimation","backgroundColor","card","width","borderLeftColor","border","borderLeftWidth","hairlineWidth","borderRightColor","borderRightWidth","borderTopRightRadius","borderBottomRightRadius","borderTopLeftRadius","borderBottomLeftRadius","overlayStyle","DrawerView","_ref3","rest","_objectWithoutProperties","_excluded","create","flex"],"sources":["E:\\bigshow\\node_modules\\@react-navigation\\drawer\\src\\views\\DrawerView.tsx"],"sourcesContent":["import {\n  getDefaultSidebarWidth,\n  getHeaderTitle,\n  Header,\n  SafeAreaProviderCompat,\n  Screen,\n} from '@react-navigation/elements';\nimport {\n  DrawerActions,\n  type DrawerNavigationState,\n  type DrawerStatus,\n  type ParamListBase,\n  StackActions,\n  useLocale,\n  useTheme,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { Platform, StyleSheet } from 'react-native';\nimport { Drawer } from 'react-native-drawer-layout';\nimport { useSafeAreaFrame } from 'react-native-safe-area-context';\nimport useLatestCallback from 'use-latest-callback';\n\nimport type {\n  DrawerContentComponentProps,\n  DrawerDescriptorMap,\n  DrawerHeaderProps,\n  DrawerNavigationConfig,\n  DrawerNavigationHelpers,\n  DrawerNavigationProp,\n} from '../types';\nimport { addCancelListener } from '../utils/addCancelListener';\nimport { DrawerPositionContext } from '../utils/DrawerPositionContext';\nimport { DrawerStatusContext } from '../utils/DrawerStatusContext';\nimport { getDrawerStatusFromState } from '../utils/getDrawerStatusFromState';\nimport { DrawerContent } from './DrawerContent';\nimport { DrawerToggleButton } from './DrawerToggleButton';\nimport { MaybeScreen, MaybeScreenContainer } from './ScreenFallback';\n\ntype Props = DrawerNavigationConfig & {\n  defaultStatus: DrawerStatus;\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\nconst DRAWER_BORDER_RADIUS = 16;\n\nconst renderDrawerContentDefault = (props: DrawerContentComponentProps) => (\n  <DrawerContent {...props} />\n);\n\nfunction DrawerViewBase({\n  state,\n  navigation,\n  descriptors,\n  defaultStatus,\n  drawerContent = renderDrawerContentDefault,\n  detachInactiveScreens = Platform.OS === 'web' ||\n    Platform.OS === 'android' ||\n    Platform.OS === 'ios',\n}: Props) {\n  const { direction } = useLocale();\n\n  const focusedRouteKey = state.routes[state.index].key;\n  const {\n    drawerHideStatusBarOnOpen,\n    drawerPosition = direction === 'rtl' ? 'right' : 'left',\n    drawerStatusBarAnimation,\n    drawerStyle,\n    drawerType = Platform.select({ ios: 'slide', default: 'front' }),\n    configureGestureHandler,\n    keyboardDismissMode,\n    overlayColor = 'rgba(0, 0, 0, 0.5)',\n    swipeEdgeWidth,\n    swipeEnabled = Platform.OS !== 'web' &&\n      Platform.OS !== 'windows' &&\n      Platform.OS !== 'macos',\n    swipeMinDistance,\n    overlayAccessibilityLabel,\n  } = descriptors[focusedRouteKey].options;\n\n  const [loaded, setLoaded] = React.useState([focusedRouteKey]);\n\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([...loaded, focusedRouteKey]);\n  }\n\n  const previousRouteKeyRef = React.useRef(focusedRouteKey);\n\n  React.useEffect(() => {\n    const previousRouteKey = previousRouteKeyRef.current;\n\n    if (\n      previousRouteKey !== focusedRouteKey &&\n      descriptors[previousRouteKey]?.options.popToTopOnBlur\n    ) {\n      const prevRoute = state.routes.find(\n        (route) => route.key === previousRouteKey\n      );\n\n      if (prevRoute?.state?.type === 'stack' && prevRoute.state.key) {\n        navigation.dispatch({\n          ...StackActions.popToTop(),\n          target: prevRoute.state.key,\n        });\n      }\n    }\n\n    previousRouteKeyRef.current = focusedRouteKey;\n  }, [descriptors, focusedRouteKey, navigation, state.routes]);\n\n  const dimensions = useSafeAreaFrame();\n\n  const { colors } = useTheme();\n\n  const drawerStatus = getDrawerStatusFromState(state);\n\n  const handleDrawerOpen = useLatestCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key,\n    });\n  });\n\n  const handleDrawerClose = useLatestCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key,\n    });\n  });\n\n  const handleGestureStart = useLatestCallback(() => {\n    navigation.emit({\n      type: 'gestureStart',\n      target: state.key,\n    });\n  });\n\n  const handleGestureEnd = useLatestCallback(() => {\n    navigation.emit({\n      type: 'gestureEnd',\n      target: state.key,\n    });\n  });\n\n  const handleGestureCancel = useLatestCallback(() => {\n    navigation.emit({\n      type: 'gestureCancel',\n      target: state.key,\n    });\n  });\n\n  const handleTransitionStart = useLatestCallback((closing: boolean) => {\n    navigation.emit({\n      type: 'transitionStart',\n      data: { closing },\n      target: state.key,\n    });\n  });\n\n  const handleTransitionEnd = useLatestCallback((closing: boolean) => {\n    navigation.emit({\n      type: 'transitionEnd',\n      data: { closing },\n      target: state.key,\n    });\n  });\n\n  React.useEffect(() => {\n    if (drawerStatus === defaultStatus || drawerType === 'permanent') {\n      return;\n    }\n\n    const handleHardwareBack = () => {\n      // We shouldn't handle the back button if the parent screen isn't focused\n      // This will avoid the drawer overriding event listeners from a focused screen\n      if (!navigation.isFocused()) {\n        return false;\n      }\n\n      if (defaultStatus === 'open') {\n        handleDrawerOpen();\n      } else {\n        handleDrawerClose();\n      }\n\n      return true;\n    };\n\n    // We only add the listeners when drawer opens\n    // This way we can make sure that the listener is added as late as possible\n    // This will make sure that our handler will run first when back button is pressed\n    return addCancelListener(handleHardwareBack);\n  }, [\n    defaultStatus,\n    drawerStatus,\n    drawerType,\n    handleDrawerClose,\n    handleDrawerOpen,\n    navigation,\n  ]);\n\n  const renderDrawerContent = () => {\n    return (\n      <DrawerPositionContext.Provider value={drawerPosition}>\n        {drawerContent({\n          state: state,\n          navigation: navigation,\n          descriptors: descriptors,\n        })}\n      </DrawerPositionContext.Provider>\n    );\n  };\n\n  const renderSceneContent = () => {\n    return (\n      <MaybeScreenContainer\n        enabled={detachInactiveScreens}\n        hasTwoStates\n        style={styles.content}\n      >\n        {state.routes.map((route, index) => {\n          const descriptor = descriptors[route.key];\n          const { lazy = true } = descriptor.options;\n          const isFocused = state.index === index;\n          const isPreloaded = state.preloadedRouteKeys.includes(route.key);\n\n          if (\n            lazy &&\n            !loaded.includes(route.key) &&\n            !isFocused &&\n            !isPreloaded\n          ) {\n            // Don't render a lazy screen if we've never navigated to it or it wasn't preloaded\n            return null;\n          }\n\n          const {\n            freezeOnBlur,\n            header = ({ layout, options }: DrawerHeaderProps) => (\n              <Header\n                {...options}\n                layout={layout}\n                title={getHeaderTitle(options, route.name)}\n                headerLeft={\n                  drawerPosition === 'left' && options.headerLeft == null\n                    ? (props) => <DrawerToggleButton {...props} />\n                    : options.headerLeft\n                }\n                headerRight={\n                  drawerPosition === 'right' && options.headerRight == null\n                    ? (props) => <DrawerToggleButton {...props} />\n                    : options.headerRight\n                }\n              />\n            ),\n            headerShown,\n            headerStatusBarHeight,\n            headerTransparent,\n            sceneStyle,\n          } = descriptor.options;\n\n          return (\n            <MaybeScreen\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { zIndex: isFocused ? 0 : -1 }]}\n              visible={isFocused}\n              enabled={detachInactiveScreens}\n              freezeOnBlur={freezeOnBlur}\n              shouldFreeze={!isFocused && !isPreloaded}\n            >\n              <Screen\n                focused={isFocused}\n                route={descriptor.route}\n                navigation={descriptor.navigation}\n                headerShown={headerShown}\n                headerStatusBarHeight={headerStatusBarHeight}\n                headerTransparent={headerTransparent}\n                header={header({\n                  layout: dimensions,\n                  route: descriptor.route,\n                  navigation:\n                    descriptor.navigation as DrawerNavigationProp<ParamListBase>,\n                  options: descriptor.options,\n                })}\n                style={sceneStyle}\n              >\n                {descriptor.render()}\n              </Screen>\n            </MaybeScreen>\n          );\n        })}\n      </MaybeScreenContainer>\n    );\n  };\n\n  return (\n    <DrawerStatusContext.Provider value={drawerStatus}>\n      <Drawer\n        open={drawerStatus !== 'closed'}\n        onOpen={handleDrawerOpen}\n        onClose={handleDrawerClose}\n        onGestureStart={handleGestureStart}\n        onGestureEnd={handleGestureEnd}\n        onGestureCancel={handleGestureCancel}\n        onTransitionStart={handleTransitionStart}\n        onTransitionEnd={handleTransitionEnd}\n        layout={dimensions}\n        direction={direction}\n        configureGestureHandler={configureGestureHandler}\n        swipeEnabled={swipeEnabled}\n        swipeEdgeWidth={swipeEdgeWidth}\n        swipeMinDistance={swipeMinDistance}\n        hideStatusBarOnOpen={drawerHideStatusBarOnOpen}\n        statusBarAnimation={drawerStatusBarAnimation}\n        keyboardDismissMode={keyboardDismissMode}\n        drawerType={drawerType}\n        overlayAccessibilityLabel={overlayAccessibilityLabel}\n        drawerPosition={drawerPosition}\n        drawerStyle={[\n          {\n            backgroundColor: colors.card,\n            width: getDefaultSidebarWidth(dimensions),\n          },\n          drawerType === 'permanent' &&\n            ((\n              Platform.OS === 'web'\n                ? drawerPosition === 'right'\n                : (direction === 'rtl' && drawerPosition !== 'right') ||\n                  (direction !== 'rtl' && drawerPosition === 'right')\n            )\n              ? {\n                  borderLeftColor: colors.border,\n                  borderLeftWidth: StyleSheet.hairlineWidth,\n                }\n              : {\n                  borderRightColor: colors.border,\n                  borderRightWidth: StyleSheet.hairlineWidth,\n                }),\n\n          drawerType === 'front' &&\n            (drawerPosition === 'left'\n              ? {\n                  borderTopRightRadius: DRAWER_BORDER_RADIUS,\n                  borderBottomRightRadius: DRAWER_BORDER_RADIUS,\n                }\n              : {\n                  borderTopLeftRadius: DRAWER_BORDER_RADIUS,\n                  borderBottomLeftRadius: DRAWER_BORDER_RADIUS,\n                }),\n          drawerStyle,\n        ]}\n        overlayStyle={{ backgroundColor: overlayColor }}\n        renderDrawerContent={renderDrawerContent}\n      >\n        {renderSceneContent()}\n      </Drawer>\n    </DrawerStatusContext.Provider>\n  );\n}\n\nexport function DrawerView({ navigation, ...rest }: Props) {\n  return (\n    <SafeAreaProviderCompat>\n      <DrawerViewBase navigation={navigation} {...rest} />\n    </SafeAreaProviderCompat>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}