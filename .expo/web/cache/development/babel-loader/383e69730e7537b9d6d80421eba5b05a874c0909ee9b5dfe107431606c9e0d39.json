{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Text, Card, Button, Icon, ListItem } from 'react-native-elements';\nimport { useNavigation } from '@react-navigation/native';\nimport { ThemeProvider, useTheme } from \"../../components/common/ThemeProvider\";\nimport Sidebar from \"../../components/common/Sidebar\";\nimport HeaderBar from \"../../components/common/HeaderBar\";\nimport { ToastContainer } from \"../../components/common/Toast\";\nimport themeBase from \"../../theme\";\nimport { db } from \"../../utils/firebase\";\nimport { collection, getDocs } from 'firebase/firestore';\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nvar DashboardContent = function DashboardContent(_ref) {\n  var stats = _ref.stats,\n    navigation = _ref.navigation;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    expandedSection = _useState2[0],\n    setExpandedSection = _useState2[1];\n  var toggleSection = function toggleSection(section) {\n    return setExpandedSection(function (prev) {\n      return prev === section ? null : section;\n    });\n  };\n  var actionColor = themeBase.colors.accent;\n  return _jsxs(View, {\n    style: styles.contentArea,\n    children: [_jsx(Text, {\n      style: [styles.header, {\n        color: actionColor\n      }],\n      children: \"Admin Dashboard\"\n    }), _jsxs(ListItem.Accordion, {\n      content: _jsxs(_Fragment, {\n        children: [_jsx(Icon, {\n          name: \"tv\",\n          type: \"font-awesome\",\n          color: actionColor,\n          size: 24\n        }), _jsx(ListItem.Content, {\n          children: _jsxs(ListItem.Title, {\n            style: {\n              color: actionColor\n            },\n            children: [\"Series (\", stats.series, \")\"]\n          })\n        })]\n      }),\n      isExpanded: expandedSection === 'Series',\n      onPress: function onPress() {\n        return toggleSection('Series');\n      },\n      containerStyle: styles.accordionContainer,\n      children: [_jsx(Button, {\n        title: \"Manage Series\",\n        onPress: function onPress() {\n          return navigation.navigate('Series');\n        },\n        buttonStyle: [styles.cardButton, {\n          backgroundColor: actionColor\n        }],\n        containerStyle: styles.buttonContainer\n      }), _jsx(Button, {\n        title: \"Add Series\",\n        type: \"outline\",\n        onPress: function onPress() {\n          return navigation.navigate('SeriesAdd');\n        },\n        buttonStyle: [styles.cardButton, {\n          borderColor: actionColor\n        }],\n        titleStyle: {\n          color: actionColor\n        },\n        containerStyle: styles.buttonContainer\n      })]\n    }), _jsxs(ListItem.Accordion, {\n      content: _jsxs(_Fragment, {\n        children: [_jsx(Icon, {\n          name: \"video-camera\",\n          type: \"font-awesome\",\n          color: actionColor,\n          size: 24\n        }), _jsx(ListItem.Content, {\n          children: _jsxs(ListItem.Title, {\n            style: {\n              color: actionColor\n            },\n            children: [\"Episodes (\", stats.episodes, \")\"]\n          })\n        })]\n      }),\n      isExpanded: expandedSection === 'Episodes',\n      onPress: function onPress() {\n        return toggleSection('Episodes');\n      },\n      containerStyle: styles.accordionContainer,\n      children: [_jsx(Button, {\n        title: \"Manage Episodes\",\n        onPress: function onPress() {\n          return navigation.navigate('Episodes');\n        },\n        buttonStyle: [styles.cardButton, {\n          backgroundColor: actionColor\n        }],\n        containerStyle: styles.buttonContainer\n      }), _jsx(Button, {\n        title: \"Add Episode\",\n        type: \"outline\",\n        onPress: function onPress() {\n          return navigation.navigate('EpisodeAdd');\n        },\n        buttonStyle: [styles.cardButton, {\n          borderColor: actionColor\n        }],\n        titleStyle: {\n          color: actionColor\n        },\n        containerStyle: styles.buttonContainer\n      })]\n    }), _jsx(ListItem.Accordion, {\n      content: _jsxs(_Fragment, {\n        children: [_jsx(Icon, {\n          name: \"film\",\n          type: \"font-awesome\",\n          color: actionColor,\n          size: 24\n        }), _jsx(ListItem.Content, {\n          children: _jsx(ListItem.Title, {\n            style: {\n              color: actionColor\n            },\n            children: \"Content Management\"\n          })\n        })]\n      }),\n      isExpanded: expandedSection === 'ContentManagement',\n      onPress: function onPress() {\n        return toggleSection('ContentManagement');\n      },\n      containerStyle: styles.accordionContainer,\n      children: _jsx(Button, {\n        title: \"Manage Content\",\n        onPress: function onPress() {\n          return navigation.navigate('ContentManagement');\n        },\n        buttonStyle: [styles.cardButton, {\n          backgroundColor: actionColor\n        }],\n        containerStyle: styles.buttonContainer\n      })\n    }), _jsx(ListItem.Accordion, {\n      content: _jsxs(_Fragment, {\n        children: [_jsx(Icon, {\n          name: \"users\",\n          type: \"font-awesome\",\n          color: actionColor,\n          size: 24\n        }), _jsx(ListItem.Content, {\n          children: _jsxs(ListItem.Title, {\n            style: {\n              color: actionColor\n            },\n            children: [\"Users (\", stats.users, \")\"]\n          })\n        })]\n      }),\n      isExpanded: expandedSection === 'Users',\n      onPress: function onPress() {\n        return toggleSection('Users');\n      },\n      containerStyle: styles.accordionContainer,\n      children: _jsx(Button, {\n        title: \"Manage Users\",\n        onPress: function onPress() {\n          return navigation.navigate('Users');\n        },\n        buttonStyle: [styles.cardButton, {\n          backgroundColor: actionColor\n        }],\n        containerStyle: styles.buttonContainer\n      })\n    }), _jsx(ListItem.Accordion, {\n      content: _jsxs(_Fragment, {\n        children: [_jsx(Icon, {\n          name: \"bar-chart\",\n          type: \"font-awesome\",\n          color: actionColor,\n          size: 24\n        }), _jsx(ListItem.Content, {\n          children: _jsx(ListItem.Title, {\n            style: {\n              color: actionColor\n            },\n            children: \"Analytics\"\n          })\n        })]\n      }),\n      isExpanded: expandedSection === 'Analytics',\n      onPress: function onPress() {\n        return toggleSection('Analytics');\n      },\n      containerStyle: styles.accordionContainer,\n      children: _jsx(Button, {\n        title: \"View Analytics\",\n        onPress: function onPress() {\n          return navigation.navigate('Analytics');\n        },\n        buttonStyle: [styles.cardButton, {\n          backgroundColor: actionColor\n        }],\n        containerStyle: styles.buttonContainer\n      })\n    }), _jsx(ListItem.Accordion, {\n      content: _jsxs(_Fragment, {\n        children: [_jsx(Icon, {\n          name: \"cog\",\n          type: \"font-awesome\",\n          color: actionColor,\n          size: 24\n        }), _jsx(ListItem.Content, {\n          children: _jsx(ListItem.Title, {\n            style: {\n              color: actionColor\n            },\n            children: \"Settings\"\n          })\n        })]\n      }),\n      isExpanded: expandedSection === 'Settings',\n      onPress: function onPress() {\n        return toggleSection('Settings');\n      },\n      containerStyle: styles.accordionContainer,\n      children: _jsx(Button, {\n        title: \"Settings\",\n        onPress: function onPress() {\n          return navigation.navigate('Settings');\n        },\n        buttonStyle: [styles.cardButton, {\n          backgroundColor: actionColor\n        }],\n        containerStyle: styles.buttonContainer\n      })\n    })]\n  });\n};\nvar DashboardScreen = function DashboardScreen() {\n  var navigation = useNavigation();\n  var _useState3 = useState({\n      series: 0,\n      episodes: 0,\n      users: 0\n    }),\n    _useState4 = _slicedToArray(_useState3, 2),\n    stats = _useState4[0],\n    setStats = _useState4[1];\n  var _useState5 = useState('dashboard'),\n    _useState6 = _slicedToArray(_useState5, 2),\n    activeSection = _useState6[0],\n    setActiveSection = _useState6[1];\n  var _useState7 = useState(null),\n    _useState8 = _slicedToArray(_useState7, 2),\n    error = _useState8[0],\n    setError = _useState8[1];\n  var _ref2 = useTheme ? useTheme() : {\n      isDarkMode: false,\n      toggleTheme: function toggleTheme() {},\n      theme: themeBase\n    },\n    isDarkMode = _ref2.isDarkMode,\n    toggleTheme = _ref2.toggleTheme,\n    theme = _ref2.theme;\n  var navigateToUsers = function navigateToUsers() {\n    console.log('Direct navigation to Users from DashboardScreen');\n    try {\n      navigation.navigate('Users');\n    } catch (error) {\n      console.error('Navigation error:', error);\n    }\n  };\n  useEffect(function () {\n    var fetchStats = function () {\n      var _ref3 = _asyncToGenerator(function* () {\n        try {\n          var _yield$Promise$all = yield Promise.all([getDocs(collection(db, 'series')), getDocs(collection(db, 'episodes')), getDocs(collection(db, 'users'))]),\n            _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 3),\n            seriesSnap = _yield$Promise$all2[0],\n            episodesSnap = _yield$Promise$all2[1],\n            usersSnap = _yield$Promise$all2[2];\n          setStats({\n            series: seriesSnap.size,\n            episodes: episodesSnap.size,\n            users: usersSnap.size\n          });\n        } catch (err) {\n          console.error('Error fetching collection stats:', err);\n          setError(err.message);\n          setStats({\n            series: '-',\n            episodes: '-',\n            users: '-'\n          });\n        }\n      });\n      return function fetchStats() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n    fetchStats();\n  }, []);\n  var isMobile = Dimensions.get('window').width < 768;\n  return _jsxs(View, {\n    style: [styles.shell, {\n      backgroundColor: theme.colors.background\n    }],\n    children: [_jsx(HeaderBar, {\n      onToggleTheme: toggleTheme,\n      isDarkMode: isDarkMode,\n      notificationCount: 0,\n      onLogout: function onLogout() {},\n      onSettings: function onSettings() {}\n    }), _jsxs(View, {\n      style: styles.body,\n      children: [!isMobile && _jsx(Sidebar, {\n        navigation: navigation,\n        activeSection: activeSection,\n        onSectionChange: setActiveSection\n      }), _jsxs(View, {\n        style: styles.mainContent,\n        children: [error && _jsxs(View, {\n          style: styles.errorContainer,\n          children: [_jsxs(Text, {\n            style: styles.errorText,\n            children: [\"Error connecting to database: \", error]\n          }), _jsx(Text, {\n            style: styles.errorSubText,\n            children: \"Using offline dashboard view\"\n          })]\n        }), _jsx(DashboardContent, {\n          stats: stats,\n          navigation: navigation\n        })]\n      })]\n    }), _jsx(ToastContainer, {})]\n  });\n};\nvar DashboardScreenWithTheme = function DashboardScreenWithTheme(props) {\n  return _jsx(ThemeProvider, {\n    children: _jsx(DashboardScreen, _objectSpread({}, props))\n  });\n};\nvar styles = StyleSheet.create({\n  shell: {\n    flex: 1,\n    minHeight: '100vh'\n  },\n  body: {\n    flex: 1,\n    flexDirection: 'row',\n    minHeight: 'calc(100vh - 64px)'\n  },\n  mainContent: {\n    flex: 1,\n    padding: themeBase.spacing.large,\n    backgroundColor: 'transparent'\n  },\n  contentArea: {\n    flex: 1,\n    width: '100%'\n  },\n  header: {\n    color: themeBase.colors.text,\n    marginBottom: themeBase.spacing.large,\n    alignSelf: 'center',\n    fontSize: themeBase.typography.fontSize.header,\n    fontWeight: themeBase.typography.fontWeight.bold\n  },\n  row: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: themeBase.spacing.large\n  },\n  card: {\n    flex: 1,\n    borderRadius: themeBase.borderRadius.medium,\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: themeBase.spacing.medium,\n    marginHorizontal: themeBase.spacing.small\n  },\n  lightCard: _objectSpread({\n    backgroundColor: '#fff',\n    borderColor: '#e0e0e0',\n    borderWidth: 1\n  }, themeBase.shadows.small),\n  cardTitle: {\n    fontSize: themeBase.typography.fontSize.medium,\n    fontWeight: themeBase.typography.fontWeight.bold,\n    marginTop: themeBase.spacing.small\n  },\n  cardValue: {\n    fontSize: themeBase.typography.fontSize.xxlarge,\n    fontWeight: themeBase.typography.fontWeight.black,\n    marginVertical: themeBase.spacing.small\n  },\n  cardButton: {\n    borderRadius: themeBase.borderRadius.small,\n    paddingHorizontal: themeBase.spacing.large\n  },\n  errorContainer: {\n    backgroundColor: 'rgba(255, 0, 0, 0.1)',\n    padding: 10,\n    borderRadius: 5,\n    marginBottom: 15\n  },\n  errorText: {\n    color: '#D32F2F',\n    fontSize: 14,\n    fontWeight: 'bold'\n  },\n  errorSubText: {\n    color: '#555',\n    fontSize: 12,\n    marginTop: 5\n  },\n  accordionContainer: {\n    backgroundColor: themeBase.colors.backgroundLight,\n    borderRadius: themeBase.borderRadius.medium,\n    marginBottom: themeBase.spacing.small\n  },\n  buttonContainer: {\n    marginVertical: themeBase.spacing.tiny\n  }\n});\nexport default DashboardScreenWithTheme;","map":{"version":3,"names":["React","useEffect","useState","View","StyleSheet","Dimensions","TouchableOpacity","Text","Card","Button","Icon","ListItem","useNavigation","ThemeProvider","useTheme","Sidebar","HeaderBar","ToastContainer","themeBase","db","collection","getDocs","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","DashboardContent","_ref","stats","navigation","_useState","_useState2","_slicedToArray","expandedSection","setExpandedSection","toggleSection","section","prev","actionColor","colors","accent","style","styles","contentArea","children","header","color","Accordion","content","name","type","size","Content","Title","series","isExpanded","onPress","containerStyle","accordionContainer","title","navigate","buttonStyle","cardButton","backgroundColor","buttonContainer","borderColor","titleStyle","episodes","users","DashboardScreen","_useState3","_useState4","setStats","_useState5","_useState6","activeSection","setActiveSection","_useState7","_useState8","error","setError","_ref2","isDarkMode","toggleTheme","theme","navigateToUsers","console","log","fetchStats","_ref3","_asyncToGenerator","_yield$Promise$all","Promise","all","_yield$Promise$all2","seriesSnap","episodesSnap","usersSnap","err","message","apply","arguments","isMobile","get","width","shell","background","onToggleTheme","notificationCount","onLogout","onSettings","body","onSectionChange","mainContent","errorContainer","errorText","errorSubText","DashboardScreenWithTheme","props","_objectSpread","create","flex","minHeight","flexDirection","padding","spacing","large","text","marginBottom","alignSelf","fontSize","typography","fontWeight","bold","row","justifyContent","card","borderRadius","medium","alignItems","paddingVertical","marginHorizontal","small","lightCard","borderWidth","shadows","cardTitle","marginTop","cardValue","xxlarge","black","marginVertical","paddingHorizontal","backgroundLight","tiny"],"sources":["E:/bigshow/src/screens/admin/DashboardScreen.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { View, StyleSheet, Dimensions, TouchableOpacity } from 'react-native';\nimport { Text, Card, Button, Icon, ListItem } from 'react-native-elements';\nimport { useNavigation } from '@react-navigation/native';\nimport { ThemeProvider, useTheme } from '../../components/common/ThemeProvider';\nimport Sidebar from '../../components/common/Sidebar';\nimport HeaderBar from '../../components/common/HeaderBar';\nimport { ToastContainer } from '../../components/common/Toast';\nimport themeBase from '../../theme';\nimport { db } from '../../utils/firebase';\nimport { collection, getDocs } from 'firebase/firestore';\n\nconst DashboardContent = ({ stats, navigation }) => {\n  const [expandedSection, setExpandedSection] = useState(null);\n  const toggleSection = section => setExpandedSection(prev => (prev === section ? null : section));\n  const actionColor = themeBase.colors.accent;\n\n  return (\n    <View style={styles.contentArea}>\n      <Text style={[styles.header, { color: actionColor }]}>Admin Dashboard</Text>\n\n      <ListItem.Accordion\n        content={\n          <>\n            <Icon name=\"tv\" type=\"font-awesome\" color={actionColor} size={24} />\n            <ListItem.Content>\n              <ListItem.Title style={{ color: actionColor }}>Series ({stats.series})</ListItem.Title>\n            </ListItem.Content>\n          </>\n        }\n        isExpanded={expandedSection === 'Series'}\n        onPress={() => toggleSection('Series')}\n        containerStyle={styles.accordionContainer}\n      >\n        <Button title=\"Manage Series\" onPress={() => navigation.navigate('Series')} buttonStyle={[styles.cardButton, { backgroundColor: actionColor }]} containerStyle={styles.buttonContainer} />\n        <Button title=\"Add Series\" type=\"outline\" onPress={() => navigation.navigate('SeriesAdd')} buttonStyle={[styles.cardButton, { borderColor: actionColor }]} titleStyle={{ color: actionColor }} containerStyle={styles.buttonContainer} />\n      </ListItem.Accordion>\n\n      <ListItem.Accordion\n        content={\n          <>\n            <Icon name=\"video-camera\" type=\"font-awesome\" color={actionColor} size={24} />\n            <ListItem.Content>\n              <ListItem.Title style={{ color: actionColor }}>Episodes ({stats.episodes})</ListItem.Title>\n            </ListItem.Content>\n          </>\n        }\n        isExpanded={expandedSection === 'Episodes'}\n        onPress={() => toggleSection('Episodes')}\n        containerStyle={styles.accordionContainer}\n      >\n        <Button title=\"Manage Episodes\" onPress={() => navigation.navigate('Episodes')} buttonStyle={[styles.cardButton, { backgroundColor: actionColor }]} containerStyle={styles.buttonContainer} />\n        <Button title=\"Add Episode\" type=\"outline\" onPress={() => navigation.navigate('EpisodeAdd')} buttonStyle={[styles.cardButton, { borderColor: actionColor }]} titleStyle={{ color: actionColor }} containerStyle={styles.buttonContainer} />\n      </ListItem.Accordion>\n\n      <ListItem.Accordion\n        content={\n          <>\n            <Icon name=\"film\" type=\"font-awesome\" color={actionColor} size={24} />\n            <ListItem.Content>\n              <ListItem.Title style={{ color: actionColor }}>Content Management</ListItem.Title>\n            </ListItem.Content>\n          </>\n        }\n        isExpanded={expandedSection === 'ContentManagement'}\n        onPress={() => toggleSection('ContentManagement')}\n        containerStyle={styles.accordionContainer}\n      >\n        <Button title=\"Manage Content\" onPress={() => navigation.navigate('ContentManagement')} buttonStyle={[styles.cardButton, { backgroundColor: actionColor }]} containerStyle={styles.buttonContainer} />\n      </ListItem.Accordion>\n\n      <ListItem.Accordion\n        content={\n          <>\n            <Icon name=\"users\" type=\"font-awesome\" color={actionColor} size={24} />\n            <ListItem.Content>\n              <ListItem.Title style={{ color: actionColor }}>Users ({stats.users})</ListItem.Title>\n            </ListItem.Content>\n          </>\n        }\n        isExpanded={expandedSection === 'Users'}\n        onPress={() => toggleSection('Users')}\n        containerStyle={styles.accordionContainer}\n      >\n        <Button title=\"Manage Users\" onPress={() => navigation.navigate('Users')} buttonStyle={[styles.cardButton, { backgroundColor: actionColor }]} containerStyle={styles.buttonContainer} />\n      </ListItem.Accordion>\n\n      <ListItem.Accordion\n        content={\n          <>\n            <Icon name=\"bar-chart\" type=\"font-awesome\" color={actionColor} size={24} />\n            <ListItem.Content>\n              <ListItem.Title style={{ color: actionColor }}>Analytics</ListItem.Title>\n            </ListItem.Content>\n          </>\n        }\n        isExpanded={expandedSection === 'Analytics'}\n        onPress={() => toggleSection('Analytics')}\n        containerStyle={styles.accordionContainer}\n      >\n        <Button title=\"View Analytics\" onPress={() => navigation.navigate('Analytics')} buttonStyle={[styles.cardButton, { backgroundColor: actionColor }]} containerStyle={styles.buttonContainer} />\n      </ListItem.Accordion>\n\n      <ListItem.Accordion\n        content={\n          <>\n            <Icon name=\"cog\" type=\"font-awesome\" color={actionColor} size={24} />\n            <ListItem.Content>\n              <ListItem.Title style={{ color: actionColor }}>Settings</ListItem.Title>\n            </ListItem.Content>\n          </>\n        }\n        isExpanded={expandedSection === 'Settings'}\n        onPress={() => toggleSection('Settings')}\n        containerStyle={styles.accordionContainer}\n      >\n        <Button title=\"Settings\" onPress={() => navigation.navigate('Settings')} buttonStyle={[styles.cardButton, { backgroundColor: actionColor }]} containerStyle={styles.buttonContainer} />\n      </ListItem.Accordion>\n\n    </View>\n  );\n};\n\nconst DashboardScreen = () => {\n  const navigation = useNavigation();\n  const [stats, setStats] = useState({ series: 0, episodes: 0, users: 0 });\n  const [activeSection, setActiveSection] = useState('dashboard');\n  const [error, setError] = useState(null);\n  const { isDarkMode, toggleTheme, theme } = useTheme ? useTheme() : { isDarkMode: false, toggleTheme: () => {}, theme: themeBase };\n\n  // Remove the direct navigation function\n  const navigateToUsers = () => {\n    console.log('Direct navigation to Users from DashboardScreen');\n    try {\n      navigation.navigate('Users');\n    } catch (error) {\n      console.error('Navigation error:', error);\n    }\n  };\n\n  useEffect(() => {\n    const fetchStats = async () => {\n      try {\n        const [seriesSnap, episodesSnap, usersSnap] = await Promise.all([\n          getDocs(collection(db, 'series')),\n          getDocs(collection(db, 'episodes')),\n          getDocs(collection(db, 'users'))\n        ]);\n        setStats({ series: seriesSnap.size, episodes: episodesSnap.size, users: usersSnap.size });\n      } catch (err) {\n        console.error('Error fetching collection stats:', err);\n        setError(err.message);\n        // Provide fallback stats when Firebase is unavailable\n        setStats({ series: '-', episodes: '-', users: '-' });\n      }\n    };\n    fetchStats();\n  }, []);\n\n  // Responsive layout\n  const isMobile = Dimensions.get('window').width < 768;\n\n  return (\n    <View style={[styles.shell, { backgroundColor: theme.colors.background }]}> \n      <HeaderBar\n        onToggleTheme={toggleTheme}\n        isDarkMode={isDarkMode}\n        notificationCount={0}\n        onLogout={() => {}}\n        onSettings={() => {}}\n      />\n      \n      {/* Remove emergency nav bar */}\n      \n      <View style={styles.body}>\n        {!isMobile && (\n          <Sidebar\n            navigation={navigation}\n            activeSection={activeSection}\n            onSectionChange={setActiveSection}\n          />\n        )}\n        <View style={styles.mainContent}>\n          {error && (\n            <View style={styles.errorContainer}>\n              <Text style={styles.errorText}>Error connecting to database: {error}</Text>\n              <Text style={styles.errorSubText}>Using offline dashboard view</Text>\n            </View>\n          )}\n          {/* Main dashboard content area */}\n          <DashboardContent stats={stats} navigation={navigation} />\n        </View>\n      </View>\n      <ToastContainer />\n    </View>\n  );\n};\n\n// Wrap with ThemeProvider for dark/light mode support\nconst DashboardScreenWithTheme = (props) => (\n  <ThemeProvider>\n    <DashboardScreen {...props} />\n  </ThemeProvider>\n);\n\nconst styles = StyleSheet.create({\n  shell: {\n    flex: 1,\n    minHeight: '100vh',\n  },\n  body: {\n    flex: 1,\n    flexDirection: 'row',\n    minHeight: 'calc(100vh - 64px)',\n  },\n  mainContent: {\n    flex: 1,\n    padding: themeBase.spacing.large,\n    backgroundColor: 'transparent',\n  },\n  contentArea: {\n    flex: 1,\n    width: '100%',\n  },\n  header: {\n    color: themeBase.colors.text,\n    marginBottom: themeBase.spacing.large,\n    alignSelf: 'center',\n    fontSize: themeBase.typography.fontSize.header,\n    fontWeight: themeBase.typography.fontWeight.bold,\n  },\n  row: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: themeBase.spacing.large,\n  },\n  card: {\n    flex: 1,\n    borderRadius: themeBase.borderRadius.medium,\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: themeBase.spacing.medium,\n    marginHorizontal: themeBase.spacing.small,\n  },\n  lightCard: {\n    backgroundColor: '#fff',\n    borderColor: '#e0e0e0',\n    borderWidth: 1,\n    ...themeBase.shadows.small,\n  },\n  cardTitle: {\n    fontSize: themeBase.typography.fontSize.medium,\n    fontWeight: themeBase.typography.fontWeight.bold,\n    marginTop: themeBase.spacing.small,\n  },\n  cardValue: {\n    fontSize: themeBase.typography.fontSize.xxlarge,\n    fontWeight: themeBase.typography.fontWeight.black,\n    marginVertical: themeBase.spacing.small,\n  },\n  cardButton: {\n    borderRadius: themeBase.borderRadius.small,\n    paddingHorizontal: themeBase.spacing.large,\n  },\n  errorContainer: {\n    backgroundColor: 'rgba(255, 0, 0, 0.1)',\n    padding: 10,\n    borderRadius: 5,\n    marginBottom: 15,\n  },\n  errorText: {\n    color: '#D32F2F',\n    fontSize: 14,\n    fontWeight: 'bold',\n  },\n  errorSubText: {\n    color: '#555',\n    fontSize: 12,\n    marginTop: 5,\n  },\n  accordionContainer: {\n    backgroundColor: themeBase.colors.backgroundLight,\n    borderRadius: themeBase.borderRadius.medium,\n    marginBottom: themeBase.spacing.small,\n  },\n  buttonContainer: {\n    marginVertical: themeBase.spacing.tiny,\n  },\n});\n\nexport default DashboardScreenWithTheme; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}