{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { auth } from \"../lib/firebaseClient\";\nimport { signInWithEmailAndPassword, createUserWithEmailAndPassword, sendPasswordResetEmail, sendEmailVerification, signOut, updatePassword } from 'firebase/auth';\nvar authApi = {\n  login: function () {\n    var _login = _asyncToGenerator(function* (email, password) {\n      try {\n        var userCredential = yield signInWithEmailAndPassword(auth, email, password);\n        return {\n          success: true,\n          data: userCredential.user\n        };\n      } catch (error) {\n        return {\n          success: false,\n          error: error.message\n        };\n      }\n    });\n    function login(_x, _x2) {\n      return _login.apply(this, arguments);\n    }\n    return login;\n  }(),\n  register: function () {\n    var _register = _asyncToGenerator(function* (email, password, name) {\n      try {\n        var userCredential = yield createUserWithEmailAndPassword(auth, email, password);\n        yield sendEmailVerification(userCredential.user);\n        return {\n          success: true,\n          data: userCredential.user\n        };\n      } catch (error) {\n        return {\n          success: false,\n          error: error.message\n        };\n      }\n    });\n    function register(_x3, _x4, _x5) {\n      return _register.apply(this, arguments);\n    }\n    return register;\n  }(),\n  forgotPassword: function () {\n    var _forgotPassword = _asyncToGenerator(function* (email) {\n      try {\n        yield sendPasswordResetEmail(auth, email);\n        return {\n          success: true\n        };\n      } catch (error) {\n        return {\n          success: false,\n          error: error.message\n        };\n      }\n    });\n    function forgotPassword(_x6) {\n      return _forgotPassword.apply(this, arguments);\n    }\n    return forgotPassword;\n  }(),\n  resetPassword: function () {\n    var _resetPassword = _asyncToGenerator(function* (token, newPassword) {\n      try {\n        yield updatePassword(auth.currentUser, newPassword);\n        return {\n          success: true\n        };\n      } catch (error) {\n        return {\n          success: false,\n          error: error.message\n        };\n      }\n    });\n    function resetPassword(_x7, _x8) {\n      return _resetPassword.apply(this, arguments);\n    }\n    return resetPassword;\n  }(),\n  logout: function () {\n    var _logout = _asyncToGenerator(function* () {\n      try {\n        yield signOut(auth);\n        return {\n          success: true\n        };\n      } catch (error) {\n        return {\n          success: false,\n          error: error.message\n        };\n      }\n    });\n    function logout() {\n      return _logout.apply(this, arguments);\n    }\n    return logout;\n  }(),\n  verifyEmail: function () {\n    var _verifyEmail = _asyncToGenerator(function* () {\n      try {\n        var user = auth.currentUser;\n        if (user) {\n          yield sendEmailVerification(user);\n          return {\n            success: true\n          };\n        }\n        return {\n          success: false,\n          error: 'No user signed in'\n        };\n      } catch (error) {\n        return {\n          success: false,\n          error: error.message\n        };\n      }\n    });\n    function verifyEmail() {\n      return _verifyEmail.apply(this, arguments);\n    }\n    return verifyEmail;\n  }(),\n  refreshToken: function () {\n    var _refreshToken = _asyncToGenerator(function* () {\n      try {\n        var user = auth.currentUser;\n        if (user) {\n          var token = yield user.getIdToken(true);\n          return {\n            success: true,\n            data: token\n          };\n        }\n        return {\n          success: false,\n          error: 'No user signed in'\n        };\n      } catch (error) {\n        return {\n          success: false,\n          error: error.message\n        };\n      }\n    });\n    function refreshToken() {\n      return _refreshToken.apply(this, arguments);\n    }\n    return refreshToken;\n  }()\n};\nexport default authApi;","map":{"version":3,"names":["auth","signInWithEmailAndPassword","createUserWithEmailAndPassword","sendPasswordResetEmail","sendEmailVerification","signOut","updatePassword","authApi","login","_login","_asyncToGenerator","email","password","userCredential","success","data","user","error","message","_x","_x2","apply","arguments","register","_register","name","_x3","_x4","_x5","forgotPassword","_forgotPassword","_x6","resetPassword","_resetPassword","token","newPassword","currentUser","_x7","_x8","logout","_logout","verifyEmail","_verifyEmail","refreshToken","_refreshToken","getIdToken"],"sources":["E:/bigshow/src/api/authApi.js"],"sourcesContent":["import { auth } from '../lib/firebaseClient';\r\nimport {\r\n  signInWithEmailAndPassword,\r\n  createUserWithEmailAndPassword,\r\n  sendPasswordResetEmail,\r\n  sendEmailVerification,\r\n  signOut,\r\n  updatePassword,\r\n} from 'firebase/auth';\r\n\r\n/**\r\n * Authentication API service\r\n */\r\nconst authApi = {\r\n  /**\r\n   * Login user with email and password\r\n   * @param {string} email - User email\r\n   * @param {string} password - User password\r\n   * @returns {Promise} - API response\r\n   */\r\n  login: async (email, password) => {\r\n    try {\r\n      const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n      return { success: true, data: userCredential.user };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Register a new user\r\n   * @param {string} email - User email\r\n   * @param {string} password - User password\r\n   * @param {string} name - User name\r\n   * @returns {Promise} - API response\r\n   */\r\n  register: async (email, password, name) => {\r\n    try {\r\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n      // Optionally set display name\r\n      await sendEmailVerification(userCredential.user);\r\n      return { success: true, data: userCredential.user };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Send password reset email\r\n   * @param {string} email - User email\r\n   * @returns {Promise} - API response\r\n   */\r\n  forgotPassword: async (email) => {\r\n    try {\r\n      await sendPasswordResetEmail(auth, email);\r\n      return { success: true };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Reset password with token\r\n   * @param {string} token - Reset token\r\n   * @param {string} newPassword - New password\r\n   * @returns {Promise} - API response\r\n   */\r\n  resetPassword: async (token, newPassword) => {\r\n    try {\r\n      // Firebase handles reset via email link; client handles action code\r\n      await updatePassword(auth.currentUser, newPassword);\r\n      return { success: true };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Logout user\r\n   * @returns {Promise} - API response\r\n   */\r\n  logout: async () => {\r\n    try {\r\n      await signOut(auth);\r\n      return { success: true };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Verify email address\r\n   * @param {string} token - Verification token\r\n   * @returns {Promise} - API response\r\n   */\r\n  verifyEmail: async () => {\r\n    try {\r\n      const user = auth.currentUser;\r\n      if (user) {\r\n        await sendEmailVerification(user);\r\n        return { success: true };\r\n      }\r\n      return { success: false, error: 'No user signed in' };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Refresh authentication token\r\n   * @param {string} refreshToken - Refresh token\r\n   * @returns {Promise} - API response\r\n   */\r\n  refreshToken: async () => {\r\n    try {\r\n      // Firebase handles token refresh internally\r\n      const user = auth.currentUser;\r\n      if (user) {\r\n        const token = await user.getIdToken(true);\r\n        return { success: true, data: token };\r\n      }\r\n      return { success: false, error: 'No user signed in' };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  },\r\n};\r\n\r\nexport default authApi; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}