{"ast":null,"code":"\"use strict\";\n\nvar _globalThis$contexts;\nimport * as React from 'react';\nvar contexts = '__react_navigation__elements_contexts';\nglobalThis[contexts] = (_globalThis$contexts = globalThis[contexts]) != null ? _globalThis$contexts : new Map();\nexport function getNamedContext(name, initialValue) {\n  var context = globalThis[contexts].get(name);\n  if (context) {\n    return context;\n  }\n  context = React.createContext(initialValue);\n  context.displayName = name;\n  globalThis[contexts].set(name, context);\n  return context;\n}","map":{"version":3,"names":["React","contexts","globalThis","_globalThis$contexts","Map","getNamedContext","name","initialValue","context","get","createContext","displayName","set"],"sources":["E:\\bigshow\\node_modules\\@react-navigation\\drawer\\node_modules\\@react-navigation\\elements\\src\\getNamedContext.tsx"],"sourcesContent":["import * as React from 'react';\n\nconst contexts = '__react_navigation__elements_contexts';\n\ndeclare global {\n  // eslint-disable-next-line no-var\n  var __react_navigation__elements_contexts: Map<string, React.Context<any>>;\n}\n\n// We use a global variable to keep our contexts so that we can reuse same contexts across packages\nglobalThis[contexts] =\n  globalThis[contexts] ?? new Map<string, React.Context<any>>();\n\nexport function getNamedContext<T>(\n  name: string,\n  initialValue: T\n): React.Context<T> {\n  let context = globalThis[contexts].get(name);\n\n  if (context) {\n    return context;\n  }\n\n  context = React.createContext<T>(initialValue);\n  context.displayName = name;\n\n  globalThis[contexts].set(name, context);\n\n  return context;\n}\n"],"mappings":";;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,IAAMC,QAAQ,GAAG,uCAAuC;AAQxDC,UAAU,CAACD,QAAQ,CAAC,IAAAE,oBAAA,GAClBD,UAAU,CAACD,QAAQ,CAAC,YAAAE,oBAAA,GAAI,IAAIC,GAAG,CAA6B,CAAC;AAE/D,OAAO,SAASC,eAAeA,CAC7BC,IAAY,EACZC,YAAe,EACG;EAClB,IAAIC,OAAO,GAAGN,UAAU,CAACD,QAAQ,CAAC,CAACQ,GAAG,CAACH,IAAI,CAAC;EAE5C,IAAIE,OAAO,EAAE;IACX,OAAOA,OAAO;EAChB;EAEAA,OAAO,GAAGR,KAAK,CAACU,aAAa,CAAIH,YAAY,CAAC;EAC9CC,OAAO,CAACG,WAAW,GAAGL,IAAI;EAE1BJ,UAAU,CAACD,QAAQ,CAAC,CAACW,GAAG,CAACN,IAAI,EAAEE,OAAO,CAAC;EAEvC,OAAOA,OAAO;AAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}