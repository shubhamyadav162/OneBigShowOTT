{"ast":null,"code":"\"use strict\";\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"direction\", \"theme\", \"linking\", \"fallback\", \"documentTitle\", \"onReady\", \"onStateChange\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { BaseNavigationContainer, getActionFromState, getPathFromState, getStateFromPath, ThemeProvider, validatePathConfig } from '@react-navigation/core';\nimport * as React from 'react';\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport useLatestCallback from 'use-latest-callback';\nimport { LinkingContext } from \"./LinkingContext.js\";\nimport { LocaleDirContext } from \"./LocaleDirContext.js\";\nimport { DefaultTheme } from \"./theming/DefaultTheme.js\";\nimport { UnhandledLinkingContext } from \"./UnhandledLinkingContext.js\";\nimport { useBackButton } from \"./useBackButton\";\nimport { useDocumentTitle } from \"./useDocumentTitle\";\nimport { useLinking } from \"./useLinking\";\nimport { useThenable } from \"./useThenable.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nglobalThis.REACT_NAVIGATION_DEVTOOLS = new WeakMap();\nfunction NavigationContainerInner(_ref, ref) {\n  var _ref$direction = _ref.direction,\n    direction = _ref$direction === void 0 ? I18nManager.getConstants().isRTL ? 'rtl' : 'ltr' : _ref$direction,\n    _ref$theme = _ref.theme,\n    theme = _ref$theme === void 0 ? DefaultTheme : _ref$theme,\n    linking = _ref.linking,\n    _ref$fallback = _ref.fallback,\n    fallback = _ref$fallback === void 0 ? null : _ref$fallback,\n    documentTitle = _ref.documentTitle,\n    onReady = _ref.onReady,\n    onStateChange = _ref.onStateChange,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var isLinkingEnabled = linking ? linking.enabled !== false : false;\n  if (linking != null && linking.config) {\n    validatePathConfig(linking.config);\n  }\n  var refContainer = React.useRef(null);\n  useBackButton(refContainer);\n  useDocumentTitle(refContainer, documentTitle);\n  var _React$useState = React.useState(),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    lastUnhandledLink = _React$useState2[0],\n    setLastUnhandledLink = _React$useState2[1];\n  var _useLinking = useLinking(refContainer, _objectSpread({\n      enabled: isLinkingEnabled,\n      prefixes: []\n    }, linking), setLastUnhandledLink),\n    getInitialState = _useLinking.getInitialState;\n  var linkingContext = React.useMemo(function () {\n    return {\n      options: linking\n    };\n  }, [linking]);\n  var unhandledLinkingContext = React.useMemo(function () {\n    return {\n      lastUnhandledLink: lastUnhandledLink,\n      setLastUnhandledLink: setLastUnhandledLink\n    };\n  }, [lastUnhandledLink, setLastUnhandledLink]);\n  var onReadyForLinkingHandling = useLatestCallback(function () {\n    var _refContainer$current, _refContainer$current2;\n    var path = (_refContainer$current = refContainer.current) == null ? void 0 : (_refContainer$current2 = _refContainer$current.getCurrentRoute()) == null ? void 0 : _refContainer$current2.path;\n    setLastUnhandledLink(function (previousLastUnhandledLink) {\n      if (previousLastUnhandledLink === path) {\n        return undefined;\n      }\n      return previousLastUnhandledLink;\n    });\n    onReady == null ? void 0 : onReady();\n  });\n  var onStateChangeForLinkingHandling = useLatestCallback(function (state) {\n    var _refContainer$current3, _refContainer$current4;\n    var path = (_refContainer$current3 = refContainer.current) == null ? void 0 : (_refContainer$current4 = _refContainer$current3.getCurrentRoute()) == null ? void 0 : _refContainer$current4.path;\n    setLastUnhandledLink(function (previousLastUnhandledLink) {\n      if (previousLastUnhandledLink === path) {\n        return undefined;\n      }\n      return previousLastUnhandledLink;\n    });\n    onStateChange == null ? void 0 : onStateChange(state);\n  });\n  React.useEffect(function () {\n    if (refContainer.current) {\n      REACT_NAVIGATION_DEVTOOLS.set(refContainer.current, {\n        get linking() {\n          var _linking$prefixes, _linking$getStateFrom, _linking$getPathFromS, _linking$getActionFro;\n          return _objectSpread(_objectSpread({}, linking), {}, {\n            enabled: isLinkingEnabled,\n            prefixes: (_linking$prefixes = linking == null ? void 0 : linking.prefixes) != null ? _linking$prefixes : [],\n            getStateFromPath: (_linking$getStateFrom = linking == null ? void 0 : linking.getStateFromPath) != null ? _linking$getStateFrom : getStateFromPath,\n            getPathFromState: (_linking$getPathFromS = linking == null ? void 0 : linking.getPathFromState) != null ? _linking$getPathFromS : getPathFromState,\n            getActionFromState: (_linking$getActionFro = linking == null ? void 0 : linking.getActionFromState) != null ? _linking$getActionFro : getActionFromState\n          });\n        }\n      });\n    }\n  });\n  var _useThenable = useThenable(getInitialState),\n    _useThenable2 = _slicedToArray(_useThenable, 2),\n    isResolved = _useThenable2[0],\n    initialState = _useThenable2[1];\n  React.useImperativeHandle(ref, function () {\n    return refContainer.current;\n  });\n  var isLinkingReady = rest.initialState != null || !isLinkingEnabled || isResolved;\n  if (!isLinkingReady) {\n    return _jsx(LocaleDirContext.Provider, {\n      value: direction,\n      children: _jsx(ThemeProvider, {\n        value: theme,\n        children: fallback\n      })\n    });\n  }\n  return _jsx(LocaleDirContext.Provider, {\n    value: direction,\n    children: _jsx(UnhandledLinkingContext.Provider, {\n      value: unhandledLinkingContext,\n      children: _jsx(LinkingContext.Provider, {\n        value: linkingContext,\n        children: _jsx(BaseNavigationContainer, _objectSpread(_objectSpread({}, rest), {}, {\n          theme: theme,\n          onReady: onReadyForLinkingHandling,\n          onStateChange: onStateChangeForLinkingHandling,\n          initialState: rest.initialState == null ? initialState : rest.initialState,\n          ref: refContainer\n        }))\n      })\n    })\n  });\n}\nexport var NavigationContainer = React.forwardRef(NavigationContainerInner);","map":{"version":3,"names":["BaseNavigationContainer","getActionFromState","getPathFromState","getStateFromPath","ThemeProvider","validatePathConfig","React","I18nManager","useLatestCallback","LinkingContext","LocaleDirContext","DefaultTheme","UnhandledLinkingContext","useBackButton","useDocumentTitle","useLinking","useThenable","jsx","_jsx","globalThis","REACT_NAVIGATION_DEVTOOLS","WeakMap","NavigationContainerInner","_ref","ref","_ref$direction","direction","getConstants","isRTL","_ref$theme","theme","linking","_ref$fallback","fallback","documentTitle","onReady","onStateChange","rest","_objectWithoutProperties","_excluded","isLinkingEnabled","enabled","config","refContainer","useRef","_React$useState","useState","_React$useState2","_slicedToArray","lastUnhandledLink","setLastUnhandledLink","_useLinking","_objectSpread","prefixes","getInitialState","linkingContext","useMemo","options","unhandledLinkingContext","onReadyForLinkingHandling","_refContainer$current","_refContainer$current2","path","current","getCurrentRoute","previousLastUnhandledLink","undefined","onStateChangeForLinkingHandling","state","_refContainer$current3","_refContainer$current4","useEffect","set","_linking$prefixes","_linking$getStateFrom","_linking$getPathFromS","_linking$getActionFro","_useThenable","_useThenable2","isResolved","initialState","useImperativeHandle","isLinkingReady","Provider","value","children","NavigationContainer","forwardRef"],"sources":["E:\\bigshow\\node_modules\\@react-navigation\\native\\src\\NavigationContainer.tsx"],"sourcesContent":["import {\n  BaseNavigationContainer,\n  getActionFromState,\n  getPathFromState,\n  getStateFromPath,\n  type NavigationContainerProps,\n  type NavigationContainerRef,\n  type NavigationState,\n  type ParamListBase,\n  ThemeProvider,\n  validatePathConfig,\n} from '@react-navigation/core';\nimport * as React from 'react';\nimport { I18nManager } from 'react-native';\nimport useLatestCallback from 'use-latest-callback';\n\nimport { LinkingContext } from './LinkingContext';\nimport { LocaleDirContext } from './LocaleDirContext';\nimport { DefaultTheme } from './theming/DefaultTheme';\nimport type {\n  DocumentTitleOptions,\n  LinkingOptions,\n  LocaleDirection,\n} from './types';\nimport { UnhandledLinkingContext } from './UnhandledLinkingContext';\nimport { useBackButton } from './useBackButton';\nimport { useDocumentTitle } from './useDocumentTitle';\nimport { useLinking } from './useLinking';\nimport { useThenable } from './useThenable';\n\ndeclare global {\n  // eslint-disable-next-line no-var\n  var REACT_NAVIGATION_DEVTOOLS: WeakMap<\n    NavigationContainerRef<any>,\n    { readonly linking: LinkingOptions<any> }\n  >;\n}\n\nglobalThis.REACT_NAVIGATION_DEVTOOLS = new WeakMap();\n\ntype Props<ParamList extends {}> = NavigationContainerProps & {\n  direction?: LocaleDirection;\n  linking?: LinkingOptions<ParamList>;\n  fallback?: React.ReactNode;\n  documentTitle?: DocumentTitleOptions;\n};\n\n/**\n * Container component which holds the navigation state designed for React Native apps.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree. When deep link handling is enabled, this will override deep links when specified. Make sure that you don't specify an `initialState` when there's a deep link (`Linking.getInitialURL()`).\n * @param props.onReady Callback which is called after the navigation tree mounts.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.onUnhandledAction Callback which is called when an action is not handled.\n * @param props.direction Text direction of the components. Defaults to `'ltr'`.\n * @param props.theme Theme object for the UI elements.\n * @param props.linking Options for deep linking. Deep link handling is enabled when this prop is provided, unless `linking.enabled` is `false`.\n * @param props.fallback Fallback component to render until we have finished getting initial state when linking is enabled. Defaults to `null`.\n * @param props.documentTitle Options to configure the document title on Web. Updating document title is handled by default unless `documentTitle.enabled` is `false`.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nfunction NavigationContainerInner(\n  {\n    direction = I18nManager.getConstants().isRTL ? 'rtl' : 'ltr',\n    theme = DefaultTheme,\n    linking,\n    fallback = null,\n    documentTitle,\n    onReady,\n    onStateChange,\n    ...rest\n  }: Props<ParamListBase>,\n  ref?: React.Ref<NavigationContainerRef<ParamListBase> | null>\n) {\n  const isLinkingEnabled = linking ? linking.enabled !== false : false;\n\n  if (linking?.config) {\n    validatePathConfig(linking.config);\n  }\n\n  const refContainer =\n    React.useRef<NavigationContainerRef<ParamListBase>>(null);\n\n  useBackButton(refContainer);\n  useDocumentTitle(refContainer, documentTitle);\n\n  const [lastUnhandledLink, setLastUnhandledLink] = React.useState<\n    string | undefined\n  >();\n\n  const { getInitialState } = useLinking(\n    refContainer,\n    {\n      enabled: isLinkingEnabled,\n      prefixes: [],\n      ...linking,\n    },\n    setLastUnhandledLink\n  );\n\n  const linkingContext = React.useMemo(() => ({ options: linking }), [linking]);\n\n  const unhandledLinkingContext = React.useMemo(\n    () => ({ lastUnhandledLink, setLastUnhandledLink }),\n    [lastUnhandledLink, setLastUnhandledLink]\n  );\n\n  const onReadyForLinkingHandling = useLatestCallback(() => {\n    // If the screen path matches lastUnhandledLink, we do not track it\n    const path = refContainer.current?.getCurrentRoute()?.path;\n    setLastUnhandledLink((previousLastUnhandledLink) => {\n      if (previousLastUnhandledLink === path) {\n        return undefined;\n      }\n      return previousLastUnhandledLink;\n    });\n    onReady?.();\n  });\n\n  const onStateChangeForLinkingHandling = useLatestCallback(\n    (state: Readonly<NavigationState> | undefined) => {\n      // If the screen path matches lastUnhandledLink, we do not track it\n      const path = refContainer.current?.getCurrentRoute()?.path;\n      setLastUnhandledLink((previousLastUnhandledLink) => {\n        if (previousLastUnhandledLink === path) {\n          return undefined;\n        }\n        return previousLastUnhandledLink;\n      });\n      onStateChange?.(state);\n    }\n  );\n  // Add additional linking related info to the ref\n  // This will be used by the devtools\n  React.useEffect(() => {\n    if (refContainer.current) {\n      REACT_NAVIGATION_DEVTOOLS.set(refContainer.current, {\n        get linking() {\n          return {\n            ...linking,\n            enabled: isLinkingEnabled,\n            prefixes: linking?.prefixes ?? [],\n            getStateFromPath: linking?.getStateFromPath ?? getStateFromPath,\n            getPathFromState: linking?.getPathFromState ?? getPathFromState,\n            getActionFromState:\n              linking?.getActionFromState ?? getActionFromState,\n          };\n        },\n      });\n    }\n  });\n\n  const [isResolved, initialState] = useThenable(getInitialState);\n\n  // FIXME\n  // @ts-expect-error not sure why this is not working\n  React.useImperativeHandle(ref, () => refContainer.current);\n\n  const isLinkingReady =\n    rest.initialState != null || !isLinkingEnabled || isResolved;\n\n  if (!isLinkingReady) {\n    return (\n      <LocaleDirContext.Provider value={direction}>\n        <ThemeProvider value={theme}>{fallback}</ThemeProvider>\n      </LocaleDirContext.Provider>\n    );\n  }\n\n  return (\n    <LocaleDirContext.Provider value={direction}>\n      <UnhandledLinkingContext.Provider value={unhandledLinkingContext}>\n        <LinkingContext.Provider value={linkingContext}>\n          <BaseNavigationContainer\n            {...rest}\n            theme={theme}\n            onReady={onReadyForLinkingHandling}\n            onStateChange={onStateChangeForLinkingHandling}\n            initialState={\n              rest.initialState == null ? initialState : rest.initialState\n            }\n            ref={refContainer}\n          />\n        </LinkingContext.Provider>\n      </UnhandledLinkingContext.Provider>\n    </LocaleDirContext.Provider>\n  );\n}\n\nexport const NavigationContainer = React.forwardRef(\n  NavigationContainerInner\n) as <RootParamList extends {} = ReactNavigation.RootParamList>(\n  props: Props<RootParamList> & {\n    ref?: React.Ref<NavigationContainerRef<RootParamList>>;\n  }\n) => React.ReactElement;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}