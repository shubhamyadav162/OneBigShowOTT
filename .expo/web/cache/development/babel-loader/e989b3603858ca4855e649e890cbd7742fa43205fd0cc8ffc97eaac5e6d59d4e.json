{"ast":null,"code":"\"use strict\";\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"screen\", \"params\", \"action\", \"href\", \"style\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { useTheme } from '@react-navigation/core';\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { useLinkProps } from \"./useLinkProps.js\";\nexport function Link(_ref) {\n  var screen = _ref.screen,\n    params = _ref.params,\n    action = _ref.action,\n    href = _ref.href,\n    style = _ref.style,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var _useTheme = useTheme(),\n    colors = _useTheme.colors,\n    fonts = _useTheme.fonts;\n  var props = useLinkProps({\n    screen: screen,\n    params: params,\n    action: action,\n    href: href\n  });\n  var onPress = function onPress(e) {\n    if ('onPress' in rest) {\n      rest.onPress == null ? void 0 : rest.onPress(e);\n    }\n    if (!e.defaultPrevented) {\n      props.onPress(e);\n    }\n  };\n  return React.createElement(Text, _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, props), rest), Platform.select({\n    web: {\n      onClick: onPress\n    },\n    default: {\n      onPress: onPress\n    }\n  })), {}, {\n    style: [{\n      color: colors.primary\n    }, fonts.regular, style]\n  }));\n}","map":{"version":3,"names":["useTheme","React","Platform","Text","useLinkProps","Link","_ref","screen","params","action","href","style","rest","_objectWithoutProperties","_excluded","_useTheme","colors","fonts","props","onPress","e","defaultPrevented","createElement","_objectSpread","select","web","onClick","default","color","primary","regular"],"sources":["E:\\bigshow\\node_modules\\@react-navigation\\native\\src\\Link.tsx"],"sourcesContent":["import { useTheme } from '@react-navigation/core';\nimport * as React from 'react';\nimport {\n  type GestureResponderEvent,\n  Platform,\n  Text,\n  type TextProps,\n} from 'react-native';\n\nimport { type LinkProps, useLinkProps } from './useLinkProps';\n\ntype Props<ParamList extends ReactNavigation.RootParamList> =\n  LinkProps<ParamList> &\n    Omit<TextProps, 'disabled'> & {\n      target?: string;\n      onPress?: (\n        e:\n          | React.MouseEvent<HTMLAnchorElement, MouseEvent>\n          | GestureResponderEvent\n      ) => void;\n      disabled?: boolean | null;\n      children: React.ReactNode;\n    };\n\n/**\n * Component to render link to another screen using a path.\n * Uses an anchor tag on the web.\n *\n * @param props.screen Name of the screen to navigate to (e.g. `'Feeds'`).\n * @param props.params Params to pass to the screen to navigate to (e.g. `{ sort: 'hot' }`).\n * @param props.href Optional absolute path to use for the href (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n * @param props.children Child elements to render the content.\n */\nexport function Link<ParamList extends ReactNavigation.RootParamList>({\n  screen,\n  params,\n  action,\n  href,\n  style,\n  ...rest\n}: Props<ParamList>) {\n  const { colors, fonts } = useTheme();\n  // @ts-expect-error: This is already type-checked by the prop types\n  const props = useLinkProps<ParamList>({ screen, params, action, href });\n\n  const onPress = (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    if ('onPress' in rest) {\n      rest.onPress?.(e);\n    }\n\n    // Let user prevent default behavior\n    if (!e.defaultPrevented) {\n      props.onPress(e);\n    }\n  };\n\n  return React.createElement(Text, {\n    ...props,\n    ...rest,\n    ...Platform.select({\n      web: { onClick: onPress } as any,\n      default: { onPress },\n    }),\n    style: [{ color: colors.primary }, fonts.regular, style],\n  });\n}\n"],"mappings":";;;;;;;AAAA,SAASA,QAAQ,QAAQ,wBAAwB;AACjD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAAA,OAAAC,QAAA;AAAA,OAAAC,IAAA;AAQ9B,SAAyBC,YAAY;AAyBrC,OAAO,SAASC,IAAIA,CAAAC,IAAA,EAOC;EAAA,IANnBC,MAAM,GAAAD,IAAA,CAANC,MAAM;IACNC,MAAM,GAAAF,IAAA,CAANE,MAAM;IACNC,MAAM,GAAAH,IAAA,CAANG,MAAM;IACNC,IAAI,GAAAJ,IAAA,CAAJI,IAAI;IACJC,KAAK,GAAAL,IAAA,CAALK,KAAK;IACFC,IAAA,GAAAC,wBAAA,CAAAP,IAAA,EAAAQ,SAAA;EAEH,IAAAC,SAAA,GAA0Bf,QAAQ,CAAC,CAAC;IAA5BgB,MAAM,GAAAD,SAAA,CAANC,MAAM;IAAEC,KAAA,GAAAF,SAAA,CAAAE,KAAA;EAEhB,IAAMC,KAAK,GAAGd,YAAY,CAAY;IAAEG,MAAM,EAANA,MAAM;IAAEC,MAAM,EAANA,MAAM;IAAEC,MAAM,EAANA,MAAM;IAAEC,IAAA,EAAAA;EAAK,CAAC,CAAC;EAEvE,IAAMS,OAAO,GACX,SADIA,OAAOA,CACXC,CAA0E,EACvE;IACH,IAAI,SAAS,IAAIR,IAAI,EAAE;MACrBA,IAAI,CAACO,OAAO,oBAAZP,IAAI,CAACO,OAAO,CAAGC,CAAC,CAAC;IACnB;IAGA,IAAI,CAACA,CAAC,CAACC,gBAAgB,EAAE;MACvBH,KAAK,CAACC,OAAO,CAACC,CAAC,CAAC;IAClB;EACF,CAAC;EAED,OAAOnB,KAAK,CAACqB,aAAa,CAACnB,IAAI,EAAAoB,aAAA,CAAAA,aAAA,CAAAA,aAAA,CAAAA,aAAA,KAC1BL,KAAK,GACLN,IAAI,GACJV,QAAQ,CAACsB,MAAM,CAAC;IACjBC,GAAG,EAAE;MAAEC,OAAO,EAAEP;IAAQ,CAAQ;IAChCQ,OAAO,EAAE;MAAER,OAAA,EAAAA;IAAQ;EACrB,CAAC,CAAC;IACFR,KAAK,EAAE,CAAC;MAAEiB,KAAK,EAAEZ,MAAM,CAACa;IAAQ,CAAC,EAAEZ,KAAK,CAACa,OAAO,EAAEnB,KAAK;EAAA,EACxD,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}