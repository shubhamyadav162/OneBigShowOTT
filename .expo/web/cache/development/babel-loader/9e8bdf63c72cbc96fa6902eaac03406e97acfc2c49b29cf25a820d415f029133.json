{"ast":null,"code":"\"use strict\";\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"href\", \"icon\", \"label\", \"labelStyle\", \"focused\", \"allowFontScaling\", \"activeTintColor\", \"inactiveTintColor\", \"activeBackgroundColor\", \"inactiveBackgroundColor\", \"style\", \"onPress\", \"pressColor\", \"pressOpacity\", \"testID\", \"accessibilityLabel\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { PlatformPressable, Text } from '@react-navigation/elements';\nimport { useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function DrawerItem(props) {\n  var _useTheme = useTheme(),\n    colors = _useTheme.colors,\n    fonts = _useTheme.fonts;\n  var href = props.href,\n    icon = props.icon,\n    label = props.label,\n    labelStyle = props.labelStyle,\n    _props$focused = props.focused,\n    focused = _props$focused === void 0 ? false : _props$focused,\n    allowFontScaling = props.allowFontScaling,\n    _props$activeTintColo = props.activeTintColor,\n    activeTintColor = _props$activeTintColo === void 0 ? colors.primary : _props$activeTintColo,\n    _props$inactiveTintCo = props.inactiveTintColor,\n    inactiveTintColor = _props$inactiveTintCo === void 0 ? Color(colors.text).alpha(0.68).rgb().string() : _props$inactiveTintCo,\n    _props$activeBackgrou = props.activeBackgroundColor,\n    activeBackgroundColor = _props$activeBackgrou === void 0 ? Color(activeTintColor).alpha(0.12).rgb().string() : _props$activeBackgrou,\n    _props$inactiveBackgr = props.inactiveBackgroundColor,\n    inactiveBackgroundColor = _props$inactiveBackgr === void 0 ? 'transparent' : _props$inactiveBackgr,\n    style = props.style,\n    onPress = props.onPress,\n    pressColor = props.pressColor,\n    _props$pressOpacity = props.pressOpacity,\n    pressOpacity = _props$pressOpacity === void 0 ? 1 : _props$pressOpacity,\n    testID = props.testID,\n    accessibilityLabel = props.accessibilityLabel,\n    rest = _objectWithoutProperties(props, _excluded);\n  var _StyleSheet$flatten = StyleSheet.flatten(style || {}),\n    _StyleSheet$flatten$b = _StyleSheet$flatten.borderRadius,\n    borderRadius = _StyleSheet$flatten$b === void 0 ? 56 : _StyleSheet$flatten$b;\n  var color = focused ? activeTintColor : inactiveTintColor;\n  var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n  var iconNode = icon ? icon({\n    size: 24,\n    focused: focused,\n    color: color\n  }) : null;\n  return _jsx(View, _objectSpread(_objectSpread({\n    collapsable: false\n  }, rest), {}, {\n    style: [styles.container, {\n      borderRadius: borderRadius,\n      backgroundColor: backgroundColor\n    }, style],\n    children: _jsx(PlatformPressable, {\n      testID: testID,\n      onPress: onPress,\n      role: \"button\",\n      \"aria-label\": accessibilityLabel,\n      \"aria-selected\": focused,\n      pressColor: pressColor,\n      pressOpacity: pressOpacity,\n      hoverEffect: {\n        color: color\n      },\n      href: href,\n      children: _jsxs(View, {\n        style: [styles.wrapper, {\n          borderRadius: borderRadius\n        }],\n        children: [iconNode, _jsx(View, {\n          style: [styles.label, {\n            marginStart: iconNode ? 12 : 0\n          }],\n          children: typeof label === 'string' ? _jsx(Text, {\n            numberOfLines: 1,\n            allowFontScaling: allowFontScaling,\n            style: [styles.labelText, {\n              color: color\n            }, fonts.medium, labelStyle],\n            children: label\n          }) : label({\n            color: color,\n            focused: focused\n          })\n        })]\n      })\n    })\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden'\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 11,\n    paddingStart: 16,\n    paddingEnd: 24\n  },\n  label: {\n    marginEnd: 12,\n    marginVertical: 4,\n    flex: 1\n  },\n  labelText: {\n    lineHeight: 24,\n    textAlignVertical: 'center'\n  }\n});","map":{"version":3,"names":["PlatformPressable","Text","useTheme","Color","React","StyleSheet","View","jsx","_jsx","jsxs","_jsxs","DrawerItem","props","_useTheme","colors","fonts","href","icon","label","labelStyle","_props$focused","focused","allowFontScaling","_props$activeTintColo","activeTintColor","primary","_props$inactiveTintCo","inactiveTintColor","text","alpha","rgb","string","_props$activeBackgrou","activeBackgroundColor","_props$inactiveBackgr","inactiveBackgroundColor","style","onPress","pressColor","_props$pressOpacity","pressOpacity","testID","accessibilityLabel","rest","_objectWithoutProperties","_excluded","_StyleSheet$flatten","flatten","_StyleSheet$flatten$b","borderRadius","color","backgroundColor","iconNode","size","_objectSpread","collapsable","styles","container","children","role","hoverEffect","wrapper","marginStart","numberOfLines","labelText","medium","create","overflow","flexDirection","alignItems","paddingVertical","paddingStart","paddingEnd","marginEnd","marginVertical","flex","lineHeight","textAlignVertical"],"sources":["E:\\bigshow\\node_modules\\@react-navigation\\drawer\\src\\views\\DrawerItem.tsx"],"sourcesContent":["import { PlatformPressable, Text } from '@react-navigation/elements';\nimport { type Route, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport {\n  type StyleProp,\n  StyleSheet,\n  type TextStyle,\n  View,\n  type ViewStyle,\n} from 'react-native';\n\ntype Props = {\n  /**\n   * The route object which should be specified by the drawer item.\n   */\n  route?: Route<string>;\n  /**\n   * The `href` to use for the anchor tag on web\n   */\n  href?: string;\n  /**\n   * The label text of the item.\n   */\n  label:\n    | string\n    | ((props: { focused: boolean; color: string }) => React.ReactNode);\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: (props: {\n    focused: boolean;\n    size: number;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  focused?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress: () => void;\n  /**\n   * Color for the icon and label when the item is active.\n   */\n  activeTintColor?: string;\n  /**\n   * Color for the icon and label when the item is inactive.\n   */\n  inactiveTintColor?: string;\n  /**\n   * Background color for item when its active.\n   */\n  activeBackgroundColor?: string;\n  /**\n   * Background color for item when its inactive.\n   */\n  inactiveBackgroundColor?: string;\n  /**\n   * Color of the touchable effect on press.\n   * Only supported on Android.\n   *\n   * @platform android\n   */\n  pressColor?: string;\n  /**\n   * Opacity of the touchable effect on press.\n   * Only supported on iOS.\n   *\n   * @platform ios\n   */\n  pressOpacity?: number;\n  /**\n   * Style object for the label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Style object for the wrapper element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Whether label font should scale to respect Text Size accessibility settings.\n   */\n  allowFontScaling?: boolean;\n\n  /**\n   * Accessibility label for drawer item.\n   */\n  accessibilityLabel?: string;\n  /**\n   * ID to locate this drawer item in tests.\n   */\n  testID?: string;\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n */\nexport function DrawerItem(props: Props) {\n  const { colors, fonts } = useTheme();\n\n  const {\n    href,\n    icon,\n    label,\n    labelStyle,\n    focused = false,\n    allowFontScaling,\n    activeTintColor = colors.primary,\n    // eslint-disable-next-line @eslint-react/no-unstable-default-props\n    inactiveTintColor = Color(colors.text).alpha(0.68).rgb().string(),\n    // eslint-disable-next-line @eslint-react/no-unstable-default-props\n    activeBackgroundColor = Color(activeTintColor).alpha(0.12).rgb().string(),\n    inactiveBackgroundColor = 'transparent',\n    style,\n    onPress,\n    pressColor,\n    pressOpacity = 1,\n    testID,\n    accessibilityLabel,\n    ...rest\n  } = props;\n\n  const { borderRadius = 56 } = StyleSheet.flatten(style || {});\n  const color = focused ? activeTintColor : inactiveTintColor;\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  const iconNode = icon ? icon({ size: 24, focused, color }) : null;\n\n  return (\n    <View\n      collapsable={false}\n      {...rest}\n      style={[styles.container, { borderRadius, backgroundColor }, style]}\n    >\n      <PlatformPressable\n        testID={testID}\n        onPress={onPress}\n        role=\"button\"\n        aria-label={accessibilityLabel}\n        aria-selected={focused}\n        pressColor={pressColor}\n        pressOpacity={pressOpacity}\n        hoverEffect={{ color }}\n        href={href}\n      >\n        <View style={[styles.wrapper, { borderRadius }]}>\n          {iconNode}\n          <View style={[styles.label, { marginStart: iconNode ? 12 : 0 }]}>\n            {typeof label === 'string' ? (\n              <Text\n                numberOfLines={1}\n                allowFontScaling={allowFontScaling}\n                style={[styles.labelText, { color }, fonts.medium, labelStyle]}\n              >\n                {label}\n              </Text>\n            ) : (\n              label({ color, focused })\n            )}\n          </View>\n        </View>\n      </PlatformPressable>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 11,\n    paddingStart: 16,\n    paddingEnd: 24,\n  },\n  label: {\n    marginEnd: 12,\n    marginVertical: 4,\n    flex: 1,\n  },\n  labelText: {\n    lineHeight: 24,\n    textAlignVertical: 'center',\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}