{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from 'react';\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { FontAwesome } from '@expo/vector-icons';\nimport * as WebBrowser from 'expo-web-browser';\nimport * as Google from 'expo-auth-session/providers/google';\nimport { GoogleAuthProvider, signInWithCredential } from 'firebase/auth';\nimport { auth } from \"../../lib/firebaseClient\";\nimport Constants from 'expo-constants';\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nWebBrowser.maybeCompleteAuthSession();\nvar getExpoConfig = function getExpoConfig() {\n  if (Constants.expoConfig) {\n    return Constants.expoConfig;\n  }\n  return Constants.manifest;\n};\nvar GoogleSignInButton = function GoogleSignInButton(_ref) {\n  var onSignInComplete = _ref.onSignInComplete,\n    buttonStyle = _ref.buttonStyle,\n    textStyle = _ref.textStyle;\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    loading = _React$useState2[0],\n    setLoading = _React$useState2[1];\n  var _React$useState3 = React.useState(null),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    error = _React$useState4[0],\n    setError = _React$useState4[1];\n  var expoConfig = getExpoConfig();\n  var extra = (expoConfig == null ? void 0 : expoConfig.extra) || {};\n  var androidClientId = extra.androidClientId || extra.GOOGLE_ANDROID_CLIENT_ID || extra.ANDROID_CLIENT_ID || '363171386735-3m36t21s3nv6qa6ufb8dlpg4c09cjlfd.apps.googleusercontent.com';\n  var webClientId = extra.webClientId || extra.GOOGLE_WEB_CLIENT_ID || extra.WEB_CLIENT_ID || '363171386735-3m36t21s3nv6qa6ufb8dlpg4c09cjlfd.apps.googleusercontent.com';\n  console.log('Google Sign-In Config:', {\n    androidClientId: androidClientId,\n    webClientId: webClientId,\n    extraKeys: Object.keys(extra)\n  });\n  var _Google$useIdTokenAut = Google.useIdTokenAuthRequest({\n      clientId: webClientId,\n      androidClientId: androidClientId,\n      webClientId: webClientId\n    }),\n    _Google$useIdTokenAut2 = _slicedToArray(_Google$useIdTokenAut, 3),\n    request = _Google$useIdTokenAut2[0],\n    response = _Google$useIdTokenAut2[1],\n    promptAsync = _Google$useIdTokenAut2[2];\n  React.useEffect(function () {\n    if ((response == null ? void 0 : response.type) === 'success') {\n      setLoading(true);\n      var id_token = response.params.id_token;\n      var credential = GoogleAuthProvider.credential(id_token);\n      signInWithCredential(auth, credential).then(function (result) {\n        console.log('Google sign-in successful');\n        if (onSignInComplete) {\n          onSignInComplete(result.user);\n        }\n      }).catch(function (error) {\n        console.error('Error signing in with Google:', error);\n        setError(error.message);\n      }).finally(function () {\n        setLoading(false);\n      });\n    } else if ((response == null ? void 0 : response.type) === 'error') {\n      var _response$error;\n      console.error('Google Sign-In error:', response.error);\n      setError(((_response$error = response.error) == null ? void 0 : _response$error.message) || 'Google Sign-In failed');\n    }\n  }, [response, onSignInComplete]);\n  var handlePress = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      setError(null);\n      setLoading(true);\n      try {\n        yield promptAsync();\n      } catch (error) {\n        console.error('Error starting Google sign-in:', error);\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function handlePress() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsxs(_Fragment, {\n    children: [_jsx(TouchableOpacity, {\n      style: [styles.button, buttonStyle],\n      onPress: handlePress,\n      disabled: loading || !request,\n      children: loading ? _jsx(ActivityIndicator, {\n        color: \"#ffffff\",\n        size: \"small\"\n      }) : _jsxs(View, {\n        style: styles.buttonContent,\n        children: [_jsx(FontAwesome, {\n          name: \"google\",\n          size: 24,\n          color: \"#ffffff\"\n        }), _jsx(Text, {\n          style: [styles.buttonText, textStyle],\n          children: \"Continue with Google\"\n        })]\n      })\n    }), error && _jsx(Text, {\n      style: styles.errorText,\n      children: error\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  button: {\n    backgroundColor: '#4285F4',\n    borderRadius: 5,\n    paddingVertical: 12,\n    paddingHorizontal: 15,\n    elevation: 3,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.2,\n    shadowRadius: 2\n  },\n  buttonContent: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  buttonText: {\n    color: '#ffffff',\n    fontSize: 16,\n    fontWeight: 'bold',\n    marginLeft: 10\n  },\n  errorText: {\n    color: 'red',\n    textAlign: 'center',\n    marginTop: 8,\n    fontSize: 12\n  }\n});\nexport default GoogleSignInButton;","map":{"version":3,"names":["React","TouchableOpacity","Text","StyleSheet","ActivityIndicator","View","FontAwesome","WebBrowser","Google","GoogleAuthProvider","signInWithCredential","auth","Constants","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","maybeCompleteAuthSession","getExpoConfig","expoConfig","manifest","GoogleSignInButton","_ref","onSignInComplete","buttonStyle","textStyle","_React$useState","useState","_React$useState2","_slicedToArray","loading","setLoading","_React$useState3","_React$useState4","error","setError","extra","androidClientId","GOOGLE_ANDROID_CLIENT_ID","ANDROID_CLIENT_ID","webClientId","GOOGLE_WEB_CLIENT_ID","WEB_CLIENT_ID","console","log","extraKeys","Object","keys","_Google$useIdTokenAut","useIdTokenAuthRequest","clientId","_Google$useIdTokenAut2","request","response","promptAsync","useEffect","type","id_token","params","credential","then","result","user","catch","message","finally","_response$error","handlePress","_ref2","_asyncToGenerator","apply","arguments","children","style","styles","button","onPress","disabled","color","size","buttonContent","name","buttonText","errorText","create","backgroundColor","borderRadius","paddingVertical","paddingHorizontal","elevation","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","flexDirection","justifyContent","alignItems","fontSize","fontWeight","marginLeft","textAlign","marginTop"],"sources":["E:/bigshow/src/components/common/GoogleSignInButton.js"],"sourcesContent":["import React from 'react';\r\nimport { TouchableOpacity, Text, StyleSheet, ActivityIndicator, View } from 'react-native';\r\nimport { FontAwesome } from '@expo/vector-icons';\r\nimport * as WebBrowser from 'expo-web-browser';\r\nimport * as Google from 'expo-auth-session/providers/google';\r\nimport { GoogleAuthProvider, signInWithCredential } from 'firebase/auth';\r\nimport { auth } from '../../lib/firebaseClient';\r\nimport Constants from 'expo-constants';\r\n\r\n// Ensure WebBrowser is configured to handle the auth session\r\nWebBrowser.maybeCompleteAuthSession();\r\n\r\n// Get proper config based on Expo SDK version\r\nconst getExpoConfig = () => {\r\n  // For Expo SDK 46 and above\r\n  if (Constants.expoConfig) {\r\n    return Constants.expoConfig;\r\n  }\r\n  \r\n  // For Expo SDK 45 and below\r\n  return Constants.manifest;\r\n};\r\n\r\nconst GoogleSignInButton = ({ onSignInComplete, buttonStyle, textStyle }) => {\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [error, setError] = React.useState(null);\r\n  \r\n  // Get config with fallbacks to multiple possible naming conventions\r\n  const expoConfig = getExpoConfig();\r\n  const extra = expoConfig?.extra || {};\r\n  \r\n  // Try different possible key names for Android Client ID\r\n  const androidClientId = \r\n    extra.androidClientId || \r\n    extra.GOOGLE_ANDROID_CLIENT_ID || \r\n    extra.ANDROID_CLIENT_ID || \r\n    '363171386735-3m36t21s3nv6qa6ufb8dlpg4c09cjlfd.apps.googleusercontent.com';\r\n  \r\n  // Try different possible key names for Web Client ID\r\n  const webClientId = \r\n    extra.webClientId || \r\n    extra.GOOGLE_WEB_CLIENT_ID || \r\n    extra.WEB_CLIENT_ID || \r\n    '363171386735-3m36t21s3nv6qa6ufb8dlpg4c09cjlfd.apps.googleusercontent.com';\r\n  \r\n  // Log config for debugging\r\n  console.log('Google Sign-In Config:', { \r\n    androidClientId: androidClientId,\r\n    webClientId: webClientId,\r\n    extraKeys: Object.keys(extra)\r\n  });\r\n\r\n  // Configure Google authentication\r\n  const [request, response, promptAsync] = Google.useIdTokenAuthRequest({\r\n    clientId: webClientId,\r\n    androidClientId: androidClientId,\r\n    webClientId: webClientId,\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    // Handle the authentication response\r\n    if (response?.type === 'success') {\r\n      setLoading(true);\r\n      const { id_token } = response.params;\r\n      \r\n      // Create a Google credential with the token\r\n      const credential = GoogleAuthProvider.credential(id_token);\r\n      \r\n      // Sign in with Firebase using the Google credential\r\n      signInWithCredential(auth, credential)\r\n        .then((result) => {\r\n          console.log('Google sign-in successful');\r\n          if (onSignInComplete) {\r\n            onSignInComplete(result.user);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error signing in with Google:', error);\r\n          setError(error.message);\r\n        })\r\n        .finally(() => {\r\n          setLoading(false);\r\n        });\r\n    } else if (response?.type === 'error') {\r\n      console.error('Google Sign-In error:', response.error);\r\n      setError(response.error?.message || 'Google Sign-In failed');\r\n    }\r\n  }, [response, onSignInComplete]);\r\n\r\n  const handlePress = async () => {\r\n    setError(null);\r\n    setLoading(true);\r\n    try {\r\n      await promptAsync();\r\n    } catch (error) {\r\n      console.error('Error starting Google sign-in:', error);\r\n      setError(error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <TouchableOpacity\r\n        style={[styles.button, buttonStyle]}\r\n        onPress={handlePress}\r\n        disabled={loading || !request}\r\n      >\r\n        {loading ? (\r\n          <ActivityIndicator color=\"#ffffff\" size=\"small\" />\r\n        ) : (\r\n          <View style={styles.buttonContent}>\r\n            <FontAwesome name=\"google\" size={24} color=\"#ffffff\" />\r\n            <Text style={[styles.buttonText, textStyle]}>Continue with Google</Text>\r\n          </View>\r\n        )}\r\n      </TouchableOpacity>\r\n      {error && <Text style={styles.errorText}>{error}</Text>}\r\n    </>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  button: {\r\n    backgroundColor: '#4285F4',\r\n    borderRadius: 5,\r\n    paddingVertical: 12,\r\n    paddingHorizontal: 15,\r\n    elevation: 3,\r\n    shadowColor: '#000',\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowOpacity: 0.2,\r\n    shadowRadius: 2,\r\n  },\r\n  buttonContent: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  buttonText: {\r\n    color: '#ffffff',\r\n    fontSize: 16,\r\n    fontWeight: 'bold',\r\n    marginLeft: 10,\r\n  },\r\n  errorText: {\r\n    color: 'red',\r\n    textAlign: 'center',\r\n    marginTop: 8,\r\n    fontSize: 12,\r\n  }\r\n});\r\n\r\nexport default GoogleSignInButton; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}