{"ast":null,"code":"\"use strict\";\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"visible\", \"children\", \"style\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar FAR_FAR_AWAY = 30000;\nexport function ResourceSavingView(_ref) {\n  var visible = _ref.visible,\n    children = _ref.children,\n    style = _ref.style,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  if (Platform.OS === 'web') {\n    return _jsx(View, _objectSpread(_objectSpread({\n      hidden: !visible,\n      style: [{\n        display: visible ? 'flex' : 'none'\n      }, styles.container, style],\n      pointerEvents: visible ? 'auto' : 'none'\n    }, rest), {}, {\n      children: children\n    }));\n  }\n  return _jsx(View, {\n    style: [styles.container, style],\n    pointerEvents: visible ? 'auto' : 'none',\n    children: _jsx(View, {\n      collapsable: false,\n      removeClippedSubviews: Platform.OS === 'ios' || Platform.OS === 'macos' ? !visible : true,\n      pointerEvents: visible ? 'auto' : 'none',\n      style: visible ? styles.attached : styles.detached,\n      children: children\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  attached: {\n    flex: 1\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY\n  }\n});","map":{"version":3,"names":["React","Platform","StyleSheet","View","jsx","_jsx","FAR_FAR_AWAY","ResourceSavingView","_ref","visible","children","style","rest","_objectWithoutProperties","_excluded","OS","_objectSpread","hidden","display","styles","container","pointerEvents","collapsable","removeClippedSubviews","attached","detached","create","flex","overflow","top"],"sources":["E:\\bigshow\\node_modules\\@react-navigation\\drawer\\node_modules\\@react-navigation\\elements\\src\\ResourceSavingView.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  type StyleProp,\n  StyleSheet,\n  View,\n  type ViewStyle,\n} from 'react-native';\n\ntype Props = {\n  visible: boolean;\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\nconst FAR_FAR_AWAY = 30000; // this should be big enough to move the whole view out of its container\n\nexport function ResourceSavingView({\n  visible,\n  children,\n  style,\n  ...rest\n}: Props) {\n  if (Platform.OS === 'web') {\n    return (\n      <View\n        // @ts-expect-error: hidden exists on web, but not in React Native\n        hidden={!visible}\n        style={[\n          { display: visible ? 'flex' : 'none' },\n          styles.container,\n          style,\n        ]}\n        pointerEvents={visible ? 'auto' : 'none'}\n        {...rest}\n      >\n        {children}\n      </View>\n    );\n  }\n\n  return (\n    <View\n      style={[styles.container, style]}\n      // box-none doesn't seem to work properly on Android\n      pointerEvents={visible ? 'auto' : 'none'}\n    >\n      <View\n        collapsable={false}\n        removeClippedSubviews={\n          // On iOS & macOS, set removeClippedSubviews to true only when not focused\n          // This is an workaround for a bug where the clipped view never re-appears\n          Platform.OS === 'ios' || Platform.OS === 'macos' ? !visible : true\n        }\n        pointerEvents={visible ? 'auto' : 'none'}\n        style={visible ? styles.attached : styles.detached}\n      >\n        {children}\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  attached: {\n    flex: 1,\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY,\n  },\n});\n"],"mappings":";;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA,OAAAC,QAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAOR,SAAAC,GAAA,IAAAC,IAAA;AAQtB,IAAMC,YAAY,GAAG,KAAK;AAE1B,OAAO,SAASC,kBAAkBA,CAAAC,IAAA,EAKxB;EAAA,IAJRC,OAAO,GAAAD,IAAA,CAAPC,OAAO;IACPC,QAAQ,GAAAF,IAAA,CAARE,QAAQ;IACRC,KAAK,GAAAH,IAAA,CAALG,KAAK;IACFC,IAAA,GAAAC,wBAAA,CAAAL,IAAA,EAAAM,SAAA;EAEH,IAAIb,QAAQ,CAACc,EAAE,KAAK,KAAK,EAAE;IACzB,OACEV,IAAA,CAACF,IAAA,EAAAa,aAAA,CAAAA,aAAA;MAECC,MAAM,EAAE,CAACR,OAAQ;MACjBE,KAAK,EAAE,CACL;QAAEO,OAAO,EAAET,OAAO,GAAG,MAAM,GAAG;MAAO,CAAC,EACtCU,MAAM,CAACC,SAAS,EAChBT,KAAK,CACL;MACFU,aAAa,EAAEZ,OAAO,GAAG,MAAM,GAAG;IAAO,GACrCG,IAAI;MAAAF,QAAA,EAEPA;IAAA,EACG,CAAC;EAEX;EAEA,OACEL,IAAA,CAACF,IAAI;IACHQ,KAAK,EAAE,CAACQ,MAAM,CAACC,SAAS,EAAET,KAAK;IAE/BU,aAAa,EAAEZ,OAAO,GAAG,MAAM,GAAG,MAAO;IAAAC,QAAA,EAEzCL,IAAA,CAACF,IAAI;MACHmB,WAAW,EAAE,KAAM;MACnBC,qBAAqB,EAGnBtB,QAAQ,CAACc,EAAE,KAAK,KAAK,IAAId,QAAQ,CAACc,EAAE,KAAK,OAAO,GAAG,CAACN,OAAO,GAAG,IAC/D;MACDY,aAAa,EAAEZ,OAAO,GAAG,MAAM,GAAG,MAAO;MACzCE,KAAK,EAAEF,OAAO,GAAGU,MAAM,CAACK,QAAQ,GAAGL,MAAM,CAACM,QAAS;MAAAf,QAAA,EAElDA;IAAQ,CACL;EAAC,CACH,CAAC;AAEX;AAEA,IAAMS,MAAM,GAAGjB,UAAU,CAACwB,MAAM,CAAC;EAC/BN,SAAS,EAAE;IACTO,IAAI,EAAE,CAAC;IACPC,QAAQ,EAAE;EACZ,CAAC;EACDJ,QAAQ,EAAE;IACRG,IAAI,EAAE;EACR,CAAC;EACDF,QAAQ,EAAE;IACRE,IAAI,EAAE,CAAC;IACPE,GAAG,EAAEvB;EACP;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}