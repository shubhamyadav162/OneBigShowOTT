{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { Input, Button, Text, Icon } from 'react-native-elements';\nimport * as ImagePicker from 'expo-image-picker';\nimport { storage, db } from \"../../utils/firebase\";\nimport { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\nimport { addDoc, collection, serverTimestamp } from 'firebase/firestore';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar SeriesAddScreen = function SeriesAddScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    title = _useState2[0],\n    setTitle = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    description = _useState4[0],\n    setDescription = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    thumbnail = _useState6[0],\n    setThumbnail = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    uploading = _useState8[0],\n    setUploading = _useState8[1];\n  var pickThumbnail = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      var _yield$ImagePicker$re = yield ImagePicker.requestMediaLibraryPermissionsAsync(),\n        status = _yield$ImagePicker$re.status;\n      if (status !== 'granted') {\n        Alert.alert('Permission required', 'Camera roll permission is required to select thumbnail.');\n        return;\n      }\n      var result = yield ImagePicker.launchImageLibraryAsync({\n        mediaTypes: ImagePicker.MediaTypeOptions.Images,\n        allowsEditing: true,\n        quality: 0.8\n      });\n      if (!result.canceled) {\n        setThumbnail(result.assets[0].uri);\n      }\n    });\n    return function pickThumbnail() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var handleSave = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      if (!title.trim()) {\n        Alert.alert('Validation', 'Please enter a title for the series.');\n        return;\n      }\n      setUploading(true);\n      try {\n        var thumbnailUrl = null;\n        if (thumbnail) {\n          var response = yield fetch(thumbnail);\n          var blob = yield response.blob();\n          var fileName = `series_${Date.now()}`;\n          var storageRef = ref(storage, `series/${fileName}`);\n          yield uploadBytes(storageRef, blob);\n          thumbnailUrl = yield getDownloadURL(storageRef);\n        }\n        yield addDoc(collection(db, 'series'), {\n          title: title.trim(),\n          description: description.trim(),\n          thumbnailUrl: thumbnailUrl,\n          createdAt: serverTimestamp()\n        });\n        Alert.alert('Success', 'Series created successfully.');\n        navigation.navigate('Series');\n      } catch (error) {\n        console.error('Error creating series:', error);\n        Alert.alert('Error', 'Could not create series. Please try again.');\n      } finally {\n        setUploading(false);\n      }\n    });\n    return function handleSave() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  return _jsxs(ScrollView, {\n    contentContainerStyle: styles.container,\n    children: [_jsx(Text, {\n      h4: true,\n      style: styles.header,\n      children: \"Add New Series\"\n    }), _jsx(Input, {\n      placeholder: \"Title\",\n      value: title,\n      onChangeText: setTitle,\n      leftIcon: {\n        name: 'edit',\n        type: 'feather',\n        color: '#555'\n      }\n    }), _jsx(Input, {\n      placeholder: \"Description\",\n      value: description,\n      onChangeText: setDescription,\n      multiline: true,\n      leftIcon: {\n        name: 'align-left',\n        type: 'feather',\n        color: '#555'\n      }\n    }), _jsx(Button, {\n      icon: _jsx(Icon, {\n        name: \"image\",\n        type: \"feather\",\n        color: \"#fff\"\n      }),\n      title: thumbnail ? 'Change Thumbnail' : 'Pick Thumbnail',\n      onPress: pickThumbnail,\n      containerStyle: styles.button\n    }), thumbnail && _jsx(Image, {\n      source: {\n        uri: thumbnail\n      },\n      style: styles.preview\n    }), _jsx(Button, {\n      title: uploading ? 'Saving...' : 'Save Series',\n      onPress: handleSave,\n      disabled: uploading,\n      containerStyle: styles.button,\n      buttonStyle: {\n        backgroundColor: '#4b7bec'\n      }\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    padding: 16,\n    backgroundColor: '#fff'\n  },\n  header: {\n    marginBottom: 16,\n    alignSelf: 'center'\n  },\n  button: {\n    marginVertical: 8\n  },\n  preview: {\n    width: '100%',\n    height: 200,\n    borderRadius: 8,\n    marginTop: 8\n  }\n});\nexport default SeriesAddScreen;","map":{"version":3,"names":["React","useState","View","StyleSheet","Image","ScrollView","Alert","Input","Button","Text","Icon","ImagePicker","storage","db","ref","uploadBytes","getDownloadURL","addDoc","collection","serverTimestamp","jsx","_jsx","jsxs","_jsxs","SeriesAddScreen","_ref","navigation","_useState","_useState2","_slicedToArray","title","setTitle","_useState3","_useState4","description","setDescription","_useState5","_useState6","thumbnail","setThumbnail","_useState7","_useState8","uploading","setUploading","pickThumbnail","_ref2","_asyncToGenerator","_yield$ImagePicker$re","requestMediaLibraryPermissionsAsync","status","alert","result","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","Images","allowsEditing","quality","canceled","assets","uri","apply","arguments","handleSave","_ref3","trim","thumbnailUrl","response","fetch","blob","fileName","Date","now","storageRef","createdAt","navigate","error","console","contentContainerStyle","styles","container","children","h4","style","header","placeholder","value","onChangeText","leftIcon","name","type","color","multiline","icon","onPress","containerStyle","button","source","preview","disabled","buttonStyle","backgroundColor","create","padding","marginBottom","alignSelf","marginVertical","width","height","borderRadius","marginTop"],"sources":["E:/bigshow/src/screens/admin/SeriesAddScreen.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, StyleSheet, Image, ScrollView, Alert } from 'react-native';\r\nimport { Input, Button, Text, Icon } from 'react-native-elements';\r\nimport * as ImagePicker from 'expo-image-picker';\r\nimport { storage, db } from '../../utils/firebase';\r\nimport { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\r\nimport { addDoc, collection, serverTimestamp } from 'firebase/firestore';\r\n\r\nconst SeriesAddScreen = ({ navigation }) => {\r\n  const [title, setTitle] = useState('');\r\n  const [description, setDescription] = useState('');\r\n  const [thumbnail, setThumbnail] = useState(null);\r\n  const [uploading, setUploading] = useState(false);\r\n\r\n  const pickThumbnail = async () => {\r\n    const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();\r\n    if (status !== 'granted') {\r\n      Alert.alert('Permission required', 'Camera roll permission is required to select thumbnail.');\r\n      return;\r\n    }\r\n    const result = await ImagePicker.launchImageLibraryAsync({\r\n      mediaTypes: ImagePicker.MediaTypeOptions.Images,\r\n      allowsEditing: true,\r\n      quality: 0.8,\r\n    });\r\n    if (!result.canceled) {\r\n      setThumbnail(result.assets[0].uri);\r\n    }\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    if (!title.trim()) {\r\n      Alert.alert('Validation', 'Please enter a title for the series.');\r\n      return;\r\n    }\r\n    setUploading(true);\r\n    try {\r\n      let thumbnailUrl = null;\r\n      if (thumbnail) {\r\n        const response = await fetch(thumbnail);\r\n        const blob = await response.blob();\r\n        const fileName = `series_${Date.now()}`;\r\n        const storageRef = ref(storage, `series/${fileName}`);\r\n        await uploadBytes(storageRef, blob);\r\n        thumbnailUrl = await getDownloadURL(storageRef);\r\n      }\r\n      await addDoc(collection(db, 'series'), {\r\n        title: title.trim(),\r\n        description: description.trim(),\r\n        thumbnailUrl,\r\n        createdAt: serverTimestamp(),\r\n      });\r\n      Alert.alert('Success', 'Series created successfully.');\r\n      navigation.navigate('Series');\r\n    } catch (error) {\r\n      console.error('Error creating series:', error);\r\n      Alert.alert('Error', 'Could not create series. Please try again.');\r\n    } finally {\r\n      setUploading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ScrollView contentContainerStyle={styles.container}>\r\n      <Text h4 style={styles.header}>Add New Series</Text>\r\n      <Input\r\n        placeholder=\"Title\"\r\n        value={title}\r\n        onChangeText={setTitle}\r\n        leftIcon={{ name: 'edit', type: 'feather', color: '#555' }}\r\n      />\r\n      <Input\r\n        placeholder=\"Description\"\r\n        value={description}\r\n        onChangeText={setDescription}\r\n        multiline\r\n        leftIcon={{ name: 'align-left', type: 'feather', color: '#555' }}\r\n      />\r\n      <Button\r\n        icon={<Icon name=\"image\" type=\"feather\" color=\"#fff\" />}\r\n        title={thumbnail ? 'Change Thumbnail' : 'Pick Thumbnail'}\r\n        onPress={pickThumbnail}\r\n        containerStyle={styles.button}\r\n      />\r\n      {thumbnail && <Image source={{ uri: thumbnail }} style={styles.preview} />}\r\n      <Button\r\n        title={uploading ? 'Saving...' : 'Save Series'}\r\n        onPress={handleSave}\r\n        disabled={uploading}\r\n        containerStyle={styles.button}\r\n        buttonStyle={{ backgroundColor: '#4b7bec' }}\r\n      />\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    padding: 16,\r\n    backgroundColor: '#fff',\r\n  },\r\n  header: {\r\n    marginBottom: 16,\r\n    alignSelf: 'center',\r\n  },\r\n  button: {\r\n    marginVertical: 8,\r\n  },\r\n  preview: {\r\n    width: '100%',\r\n    height: 200,\r\n    borderRadius: 8,\r\n    marginTop: 8,\r\n  },\r\n});\r\n\r\nexport default SeriesAddScreen; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,KAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,KAAA;AAExC,SAASC,KAAK,EAAEC,MAAM,EAAEC,IAAI,EAAEC,IAAI,QAAQ,uBAAuB;AACjE,OAAO,KAAKC,WAAW,MAAM,mBAAmB;AAChD,SAASC,OAAO,EAAEC,EAAE;AACpB,SAASC,GAAG,EAAEC,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;AACnE,SAASC,MAAM,EAAEC,UAAU,EAAEC,eAAe,QAAQ,oBAAoB;AAAC,SAAAC,GAAA,IAAAC,IAAA,EAAAC,IAAA,IAAAC,KAAA;AAEzE,IAAMC,eAAe,GAAG,SAAlBA,eAAeA,CAAAC,IAAA,EAAuB;EAAA,IAAjBC,UAAU,GAAAD,IAAA,CAAVC,UAAU;EACnC,IAAAC,SAAA,GAA0B1B,QAAQ,CAAC,EAAE,CAAC;IAAA2B,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA/BG,KAAK,GAAAF,UAAA;IAAEG,QAAQ,GAAAH,UAAA;EACtB,IAAAI,UAAA,GAAsC/B,QAAQ,CAAC,EAAE,CAAC;IAAAgC,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAA3CE,WAAW,GAAAD,UAAA;IAAEE,cAAc,GAAAF,UAAA;EAClC,IAAAG,UAAA,GAAkCnC,QAAQ,CAAC,IAAI,CAAC;IAAAoC,UAAA,GAAAR,cAAA,CAAAO,UAAA;IAAzCE,SAAS,GAAAD,UAAA;IAAEE,YAAY,GAAAF,UAAA;EAC9B,IAAAG,UAAA,GAAkCvC,QAAQ,CAAC,KAAK,CAAC;IAAAwC,UAAA,GAAAZ,cAAA,CAAAW,UAAA;IAA1CE,SAAS,GAAAD,UAAA;IAAEE,YAAY,GAAAF,UAAA;EAE9B,IAAMG,aAAa;IAAA,IAAAC,KAAA,GAAAC,iBAAA,CAAG,aAAY;MAChC,IAAAC,qBAAA,SAAyBpC,WAAW,CAACqC,mCAAmC,CAAC,CAAC;QAAlEC,MAAM,GAAAF,qBAAA,CAANE,MAAM;MACd,IAAIA,MAAM,KAAK,SAAS,EAAE;QACxB3C,KAAK,CAAC4C,KAAK,CAAC,qBAAqB,EAAE,yDAAyD,CAAC;QAC7F;MACF;MACA,IAAMC,MAAM,SAASxC,WAAW,CAACyC,uBAAuB,CAAC;QACvDC,UAAU,EAAE1C,WAAW,CAAC2C,gBAAgB,CAACC,MAAM;QAC/CC,aAAa,EAAE,IAAI;QACnBC,OAAO,EAAE;MACX,CAAC,CAAC;MACF,IAAI,CAACN,MAAM,CAACO,QAAQ,EAAE;QACpBnB,YAAY,CAACY,MAAM,CAACQ,MAAM,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC;MACpC;IACF,CAAC;IAAA,gBAdKhB,aAAaA,CAAA;MAAA,OAAAC,KAAA,CAAAgB,KAAA,OAAAC,SAAA;IAAA;EAAA,GAclB;EAED,IAAMC,UAAU;IAAA,IAAAC,KAAA,GAAAlB,iBAAA,CAAG,aAAY;MAC7B,IAAI,CAAChB,KAAK,CAACmC,IAAI,CAAC,CAAC,EAAE;QACjB3D,KAAK,CAAC4C,KAAK,CAAC,YAAY,EAAE,sCAAsC,CAAC;QACjE;MACF;MACAP,YAAY,CAAC,IAAI,CAAC;MAClB,IAAI;QACF,IAAIuB,YAAY,GAAG,IAAI;QACvB,IAAI5B,SAAS,EAAE;UACb,IAAM6B,QAAQ,SAASC,KAAK,CAAC9B,SAAS,CAAC;UACvC,IAAM+B,IAAI,SAASF,QAAQ,CAACE,IAAI,CAAC,CAAC;UAClC,IAAMC,QAAQ,GAAG,UAAUC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;UACvC,IAAMC,UAAU,GAAG3D,GAAG,CAACF,OAAO,EAAE,UAAU0D,QAAQ,EAAE,CAAC;UACrD,MAAMvD,WAAW,CAAC0D,UAAU,EAAEJ,IAAI,CAAC;UACnCH,YAAY,SAASlD,cAAc,CAACyD,UAAU,CAAC;QACjD;QACA,MAAMxD,MAAM,CAACC,UAAU,CAACL,EAAE,EAAE,QAAQ,CAAC,EAAE;UACrCiB,KAAK,EAAEA,KAAK,CAACmC,IAAI,CAAC,CAAC;UACnB/B,WAAW,EAAEA,WAAW,CAAC+B,IAAI,CAAC,CAAC;UAC/BC,YAAY,EAAZA,YAAY;UACZQ,SAAS,EAAEvD,eAAe,CAAC;QAC7B,CAAC,CAAC;QACFb,KAAK,CAAC4C,KAAK,CAAC,SAAS,EAAE,8BAA8B,CAAC;QACtDxB,UAAU,CAACiD,QAAQ,CAAC,QAAQ,CAAC;MAC/B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9CtE,KAAK,CAAC4C,KAAK,CAAC,OAAO,EAAE,4CAA4C,CAAC;MACpE,CAAC,SAAS;QACRP,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAAA,gBA9BKoB,UAAUA,CAAA;MAAA,OAAAC,KAAA,CAAAH,KAAA,OAAAC,SAAA;IAAA;EAAA,GA8Bf;EAED,OACEvC,KAAA,CAAClB,UAAU;IAACyE,qBAAqB,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,GAClD5D,IAAA,CAACZ,IAAI;MAACyE,EAAE;MAACC,KAAK,EAAEJ,MAAM,CAACK,MAAO;MAAAH,QAAA,EAAC;IAAc,CAAM,CAAC,EACpD5D,IAAA,CAACd,KAAK;MACJ8E,WAAW,EAAC,OAAO;MACnBC,KAAK,EAAExD,KAAM;MACbyD,YAAY,EAAExD,QAAS;MACvByD,QAAQ,EAAE;QAAEC,IAAI,EAAE,MAAM;QAAEC,IAAI,EAAE,SAAS;QAAEC,KAAK,EAAE;MAAO;IAAE,CAC5D,CAAC,EACFtE,IAAA,CAACd,KAAK;MACJ8E,WAAW,EAAC,aAAa;MACzBC,KAAK,EAAEpD,WAAY;MACnBqD,YAAY,EAAEpD,cAAe;MAC7ByD,SAAS;MACTJ,QAAQ,EAAE;QAAEC,IAAI,EAAE,YAAY;QAAEC,IAAI,EAAE,SAAS;QAAEC,KAAK,EAAE;MAAO;IAAE,CAClE,CAAC,EACFtE,IAAA,CAACb,MAAM;MACLqF,IAAI,EAAExE,IAAA,CAACX,IAAI;QAAC+E,IAAI,EAAC,OAAO;QAACC,IAAI,EAAC,SAAS;QAACC,KAAK,EAAC;MAAM,CAAE,CAAE;MACxD7D,KAAK,EAAEQ,SAAS,GAAG,kBAAkB,GAAG,gBAAiB;MACzDwD,OAAO,EAAElD,aAAc;MACvBmD,cAAc,EAAEhB,MAAM,CAACiB;IAAO,CAC/B,CAAC,EACD1D,SAAS,IAAIjB,IAAA,CAACjB,KAAK;MAAC6F,MAAM,EAAE;QAAErC,GAAG,EAAEtB;MAAU,CAAE;MAAC6C,KAAK,EAAEJ,MAAM,CAACmB;IAAQ,CAAE,CAAC,EAC1E7E,IAAA,CAACb,MAAM;MACLsB,KAAK,EAAEY,SAAS,GAAG,WAAW,GAAG,aAAc;MAC/CoD,OAAO,EAAE/B,UAAW;MACpBoC,QAAQ,EAAEzD,SAAU;MACpBqD,cAAc,EAAEhB,MAAM,CAACiB,MAAO;MAC9BI,WAAW,EAAE;QAAEC,eAAe,EAAE;MAAU;IAAE,CAC7C,CAAC;EAAA,CACQ,CAAC;AAEjB,CAAC;AAED,IAAMtB,MAAM,GAAG5E,UAAU,CAACmG,MAAM,CAAC;EAC/BtB,SAAS,EAAE;IACTuB,OAAO,EAAE,EAAE;IACXF,eAAe,EAAE;EACnB,CAAC;EACDjB,MAAM,EAAE;IACNoB,YAAY,EAAE,EAAE;IAChBC,SAAS,EAAE;EACb,CAAC;EACDT,MAAM,EAAE;IACNU,cAAc,EAAE;EAClB,CAAC;EACDR,OAAO,EAAE;IACPS,KAAK,EAAE,MAAM;IACbC,MAAM,EAAE,GAAG;IACXC,YAAY,EAAE,CAAC;IACfC,SAAS,EAAE;EACb;AACF,CAAC,CAAC;AAEF,eAAetF,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}