{"ast":null,"code":"\"use strict\";\n\nimport * as React from 'react';\nimport { NavigationBuilderContext } from \"./NavigationBuilderContext.js\";\nexport function useFocusedListenersChildrenAdapter(_ref) {\n  var navigation = _ref.navigation,\n    focusedListeners = _ref.focusedListeners;\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n    addListener = _React$useContext.addListener;\n  var listener = React.useCallback(function (callback) {\n    if (navigation.isFocused()) {\n      for (var _listener of focusedListeners) {\n        var _listener2 = _listener(callback),\n          handled = _listener2.handled,\n          result = _listener2.result;\n        if (handled) {\n          return {\n            handled: handled,\n            result: result\n          };\n        }\n      }\n      return {\n        handled: true,\n        result: callback(navigation)\n      };\n    } else {\n      return {\n        handled: false,\n        result: null\n      };\n    }\n  }, [focusedListeners, navigation]);\n  React.useEffect(function () {\n    return addListener == null ? void 0 : addListener('focus', listener);\n  }, [addListener, listener]);\n}","map":{"version":3,"names":["React","NavigationBuilderContext","useFocusedListenersChildrenAdapter","_ref","navigation","focusedListeners","_React$useContext","useContext","addListener","listener","useCallback","callback","isFocused","_listener2","handled","result","useEffect"],"sources":["E:\\bigshow\\node_modules\\@react-navigation\\core\\src\\useFocusedListenersChildrenAdapter.tsx"],"sourcesContent":["import type { ParamListBase } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport {\n  type FocusedNavigationCallback,\n  type FocusedNavigationListener,\n  NavigationBuilderContext,\n} from './NavigationBuilderContext';\nimport type { NavigationHelpers } from './types';\n\ntype Options = {\n  navigation: NavigationHelpers<ParamListBase>;\n  focusedListeners: FocusedNavigationListener[];\n};\n\n/**\n * Hook for passing focus callback to children\n */\nexport function useFocusedListenersChildrenAdapter({\n  navigation,\n  focusedListeners,\n}: Options) {\n  const { addListener } = React.useContext(NavigationBuilderContext);\n\n  const listener = React.useCallback(\n    (callback: FocusedNavigationCallback<any>) => {\n      if (navigation.isFocused()) {\n        for (const listener of focusedListeners) {\n          const { handled, result } = listener(callback);\n\n          if (handled) {\n            return { handled, result };\n          }\n        }\n\n        return { handled: true, result: callback(navigation) };\n      } else {\n        return { handled: false, result: null };\n      }\n    },\n    [focusedListeners, navigation]\n  );\n\n  React.useEffect(\n    () => addListener?.('focus', listener),\n    [addListener, listener]\n  );\n}\n"],"mappings":";;AACA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,SAGEC,wBAAwB;AAY1B,OAAO,SAASC,kCAAkCA,CAAAC,IAAA,EAGtC;EAAA,IAFVC,UAAU,GAAAD,IAAA,CAAVC,UAAU;IACVC,gBAAA,GAAAF,IAAA,CAAAE,gBAAA;EAEA,IAAAC,iBAAA,GAAwBN,KAAK,CAACO,UAAU,CAACN,wBAAwB,CAAC;IAA1DO,WAAA,GAAAF,iBAAA,CAAAE,WAAA;EAER,IAAMC,QAAQ,GAAGT,KAAK,CAACU,WAAW,CAC/B,UAAAC,QAAwC,EAAK;IAC5C,IAAIP,UAAU,CAACQ,SAAS,CAAC,CAAC,EAAE;MAC1B,KAAK,IAAMH,SAAQ,IAAIJ,gBAAgB,EAAE;QACvC,IAAAQ,UAAA,GAA4BJ,SAAQ,CAACE,QAAQ,CAAC;UAAtCG,OAAO,GAAAD,UAAA,CAAPC,OAAO;UAAEC,MAAA,GAAAF,UAAA,CAAAE,MAAA;QAEjB,IAAID,OAAO,EAAE;UACX,OAAO;YAAEA,OAAO,EAAPA,OAAO;YAAEC,MAAA,EAAAA;UAAO,CAAC;QAC5B;MACF;MAEA,OAAO;QAAED,OAAO,EAAE,IAAI;QAAEC,MAAM,EAAEJ,QAAQ,CAACP,UAAU;MAAE,CAAC;IACxD,CAAC,MAAM;MACL,OAAO;QAAEU,OAAO,EAAE,KAAK;QAAEC,MAAM,EAAE;MAAK,CAAC;IACzC;EACF,CAAC,EACD,CAACV,gBAAgB,EAAED,UAAU,CAC/B,CAAC;EAEDJ,KAAK,CAACgB,SAAS,CACb;IAAA,OAAMR,WAAW,oBAAXA,WAAW,CAAG,OAAO,EAAEC,QAAQ,CAAC;EAAA,GACtC,CAACD,WAAW,EAAEC,QAAQ,CACxB,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}